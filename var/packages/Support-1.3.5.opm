<?xml version="1.0" encoding="utf-8" ?>
<otrs_package version="1.1">
    <Name>Support</Name>
    <Version>1.3.5</Version>
    <Vendor>OTRS AG</Vendor>
    <URL>http://otrs.org/</URL>
    <License>GNU AFFERO GENERAL PUBLIC LICENSE Version 3, November 2007</License>
    <ChangeLog Date="2012-08-08 16:19:24" Version="1.3.5">Fixed benchmark feature.</ChangeLog>
    <ChangeLog Date="2012-07-13 14:49:14" Version="1.3.4">Disable TableCheck to fix crash of the database and webserver.</ChangeLog>
    <ChangeLog Date="2012-01-26 16:49:28" Version="1.3.3">Code cleanup.</ChangeLog>
    <ChangeLog Date="2011-11-25 12:16:28" Version="1.3.2">Fixed division by zero bug.</ChangeLog>
    <ChangeLog Date="2011-11-18 05:34:34" Version="1.3.1">Init release for OTRS 3.1.</ChangeLog>
    <Description Lang="en">Verifies System settings and gives performance tips.</Description>
    <Description Lang="de">Das Support-Assessment-Modul prüft fehlerhafte System-Einstellungen und gibt Performance-Tips.</Description>
    <Description Lang="es">Comprueba configuraciones del sistema y brinda consejos de rendimiento.</Description>
    <Framework>3.1.x</Framework>
    <IntroInstall Lang="en" Title="Notice - Introduction" Type="post">The Support assessment module provides system checks and can help to find setup errors. After installation it can be accessed from the Administration Interface, in the System Administration panel.</IntroInstall>
    <IntroInstall Lang="de" Title="Hinweis - Einführung" Type="post">Das Support-Assessment-Modul bietet Systemüberprüfungen an, mit denen Einrichtungsfehler erkannt werden können. Nach der Installation kann es über den Administrationsbereich im Abschnitt System-Administration aufgerufen werden.</IntroInstall>
    <IntroInstall Lang="es" Title="Notice - Introduction" Type="post">El módulo de evaluación de soporte proporciona comprobaciones del sistema y puede ayudar a encontrar errores de configuración. Después de la instalación se puede acceder desde la Interfaz de Administración, en el panel de administración del sistema.</IntroInstall>
    <BuildDate>2012-08-08 16:19:24</BuildDate>
    <BuildHost>opms.otrs.com</BuildHost>
    <Filelist>
        <File Location="Kernel/Config/Files/Support.xml" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Language/de_Support.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9MYW5ndWFnZS9kZV9TdXBwb3J0LnBtIC0gdHJhbnNsYXRpb24gZmlsZQojIENvcHlyaWdodCAoQykgMjAwMS0yMDEyIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLm9yZy8KIyAtLQojICRJZDogZGVfU3VwcG9ydC5wbSx2IDEuMSAyMDEyLzAxLzI2IDE1OjM2OjUzIG1oIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6TGFuZ3VhZ2U6OmRlX1N1cHBvcnQ7Cgp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7CnVzZSB1dGY4OwoKc3ViIERhdGEgewogICAgbXkgJFNlbGYgPSBzaGlmdDsKCiAgICAjIFRlbXBsYXRlOiBBZG1pblN1cHBvcnQKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57Jyd9ID0gJyc7CgogICAgIyBTeXNDb25maWcKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0Zyb250ZW5kIG1vZHVsZSByZWdpc3RyYXRpb24gZm9yIHRoZSBBZG1pblN5c3RlbVN0YXR1cyBvYmplY3QgaW4gdGhlIGFkbWluIGFyZWEuJ30gPSAnRnJvbnRlbmRtb2R1bC1SZWdpc3RyYXRpb24gZGVzIEFkbWluU3lzdGVtU3RhdHVzLU9iamVrdHMgaW0gQWRtaW4tQmVyZWljaC4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnVGhlIHVzZWQgc2VuZGVyIG1haWwgYWRkcmVzcy4nfSA9ICdEaWUgdmVyd2VuZGV0ZSBBYnNlbmRlcmFkcmVzc2UuJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RlZmluaXRpb24gb2YgdGhlIGRhdGFiYXNlIGNoZWNrcyBmb3IgdGhlIERCMiBkYXRhYmFzZS4nfSA9ICdEZWZpbml0aW9uIGRlciBEYXRlbmJhbmstQ2hlY2tzIGbDvHIgZGllIERCMiBEYXRlbmJhbmsuJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RlZmluaXRpb24gb2YgdGhlIGRhdGFiYXNlIGNoZWNrcyBmb3IgdGhlIE1TU1FMIGRhdGFiYXNlLid9ID0gJ0RlZmluaXRpb24gZGVyIERhdGVuYmFuay1DaGVja3MgZsO8ciBkaWUgTVNTUUwgRGF0ZW5iYW5rLic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZWZpbml0aW9uIG9mIHRoZSBkYXRhYmFzZSBjaGVja3MgZm9yIHRoZSBNeVNRTCBkYXRhYmFzZS4nfSA9ICdEZWZpbml0aW9uIGRlciBEYXRlbmJhbmstQ2hlY2tzIGbDvHIgZGllIE15U1FMIERhdGVuYmFuay4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGVmaW5pdGlvbiBvZiB0aGUgZGF0YWJhc2UgY2hlY2tzIGZvciB0aGUgT3JhY2xlIGRhdGFiYXNlLid9ID0gJ0RlZmluaXRpb24gZGVyIERhdGVuYmFuay1DaGVja3MgZsO8ciBkaWUgT3JhY2xlIERhdGVuYmFuay4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGVmaW5pdGlvbiBvZiB0aGUgZGF0YWJhc2UgY2hlY2tzIGZvciB0aGUgUG9zdGdyZVNRTCBkYXRhYmFzZS4nfSA9ICdEZWZpbml0aW9uIGRlciBEYXRlbmJhbmstQ2hlY2tzIGbDvHIgZGllIFBvc3RncmVTUUwgRGF0ZW5iYW5rLic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZWZpbml0aW9uIG9mIHRoZSBPcGVyYXRpbmcgU3lzdGVtIGNoZWNrcy4nfSA9ICdEZWZpbml0aW9uIGRlciBCZXRyaWVic3N5c3RlbS1DaGVja3MuJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RlZmluaXRpb24gb2YgdGhlIE9UUlMgY2hlY2tzLid9ID0gJ0RlZmluaXRpb24gZGVyIE9UUlMtQ2hlY2tzLic7CiAgICAkU2VsZi0+e1RyYW5zbGF0aW9ufS0+eydEZWZpbml0aW9uIG9mIHRoZSB3ZWJzZXJ2ZXIgY2hlY2tzIGZvciB0aGUgQXBhY2hlIHdlYnNlcnZlci4nfSA9ICdEZWZpbml0aW9uIGRlciBXZWJzZXJ2ZXItQ2hlY2tzIGbDvHIgZGVuIEFwYWNoZSBXZWJzZXJ2ZXIuJzsKICAgICRTZWxmLT57VHJhbnNsYXRpb259LT57J0RlZmluaXRpb24gb2YgdGhlIHdlYnNlcnZlciBjaGVja3MgZm9yIHRoZSBJSVMgd2Vic2VydmVyLid9ID0gJ0RlZmluaXRpb24gZGVyIFdlYnNlcnZlci1DaGVja3MgZsO8ciBkZW4gSUlTIFdlYnNlcnZlci4nOwogICAgJFNlbGYtPntUcmFuc2xhdGlvbn0tPnsnRGVmaW5pdGlvbiBvZiB0aGUgQ3JvbiBjaGVja3MuJ30gPSAnRGVmaW5pdGlvbiBkZXIgQ3Jvbi1DaGVja3MuJzsKCiAgICAjCiAgICAjIE9CU09MRVRFIEVOVFJJRVMgRk9SIFJFRkVSRU5DRSwgRE8gTk9UIFRSQU5TTEFURSEKICAgICMKCn0KCjE7Cg==</File>
        <File Location="Kernel/Modules/AdminSupport.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/Output/HTML/Standard/AdminSupport.dtl" Permission="644" Encode="Base64">IyAtLQojIEFkbWluU3VwcG9ydC5kdGwgLSBwcm92aWRlcyBIVE1MIGZvcm0gZm9yIEFkbWluU3VwcG9ydAojIENvcHlyaWdodCAoQykgMjAwMS0yMDExIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLm9yZy8KIyAtLQojICRJZDogQWRtaW5TdXBwb3J0LmR0bCx2IDEuMzMgMjAxMS8xMS8yMiAxODoxMDo0NSBjZyBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKIyAtLS0KIyAtIFN1cHBvcnRtb2R1bGUgb3ZlcnZpZXcgcGFnZQojIC0tLQoKPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXcgLS0+CjxkaXYgY2xhc3M9Ik1haW5Cb3ggQWRtaW5TdXBwb3J0IEFSSUFSb2xlTWFpbiBMYXlvdXRGaXhlZFNpZGViYXIgU2lkZWJhckZpcnN0Ij4KICAgIDxoMT4kVGV4dHsiT3ZlcnZpZXcifTogJFRleHR7IlN1cHBvcnQgQXNzZXNzbWVudCJ9PC9oMT4KCiAgICA8ZGl2IGNsYXNzPSJTaWRlYmFyQ29sdW1uIj4KICAgICAgICA8ZGl2IGNsYXNzPSJXaWRnZXRTaW1wbGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJIZWFkZXIiPgogICAgICAgICAgICAgICAgPGgyPiRUZXh0eyJBY3Rpb25zIn08L2gyPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGVudCc+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9IkFjdGlvbkxpc3QiPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iJEVudnsiQmFzZWxpbmsifUFjdGlvbj0kRW52eyJBY3Rpb24ifTtTdWJhY3Rpb249Q29uZmlkZW50aWFsIiBjbGFzcz0iQ2FsbEZvckFjdGlvbiI+PHNwYW4+JFRleHR7IlN0YXJ0IHN1cHBvcnQifTwvc3Bhbj48L2E+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICA8bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiRFbnZ7IkJhc2VsaW5rIn1BY3Rpb249JEVudnsiQWN0aW9uIn07U3ViYWN0aW9uPUJlbmNobWFya1NRTEluaXQiIGNsYXNzPSJDYWxsRm9yQWN0aW9uIj48c3Bhbj4kVGV4dHsiU1FMIGJlbmNobWFyayJ9PC9zcGFuPjwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgICAgPGRpdiBjbGFzcz0iV2lkZ2V0U2ltcGxlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iSGVhZGVyIj4KICAgICAgICAgICAgICAgIDxoMj4kVGV4dHsiTm90ZSJ9PC9oMj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9J0NvbnRlbnQnPgogICAgICAgICAgICAgICAgPHA+CiAgICAgICAgICAgICAgICAgICAgJFRleHR7IkZvciBxdWljayBoZWxwIHBsZWFzZSBzdWJtaXQgeW91ciBzeXN0ZW0gaW5mb3JtYXRpb24gYW5kIGNyZWF0ZSBhIHN1cHBvcnQgdGlja2V0IGF0IHRoZSB2ZW5kb3IncyBzaXRlLiJ9CiAgICAgICAgICAgICAgICAgICAgPGJyLz4KICAgICAgICAgICAgICAgICAgICAkVGV4dHsiRm9yIG1vcmUgaW5mbyBwbGVhc2UgY2hlY2sifSA8YSBocmVmPSJodHRwOi8vb3Rycy5jb20vIiB0YXJnZXQ9Il9ibGFuayI+aHR0cDovL290cnMuY29tLzwvYT4KICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KCiAgICA8ZGl2IGNsYXNzPSJDb250ZW50Q29sdW1uIj4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdNb2R1bGUgLS0+CiAgICAgICAgPGRpdiBjbGFzcz0iV2lkZ2V0U2ltcGxlIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iSGVhZGVyIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IldpZGdldEFjdGlvbiBUb2dnbGUiPgogICAgICAgICAgICAgICAgICAgIDxhIHRpdGxlPSJUb2dnbGUgdGhpcyB3aWRnZXQiIGhyZWY9IiMiPjwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGgyPiRRRGF0YXsiTW9kdWxlIn08L2gyPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ29udGVudCI+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TW9kdWxlUm93IC0tPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iQ2hlY2tSZXN1bHQgQ2hlY2tSZXN1bHQkUURhdGF7IkNoZWNrIn0iPgogICAgICAgICAgICAgICAgICAgICAgICA8aDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT0iJFFEYXRheyJDaGVjayJ9IiBjbGFzcz0iRmxhZyBTbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+JFFEYXRheyJDaGVjayJ9PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFFEYXRheyJEZXNjcmlwdGlvbiJ9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJTcGFjaW5nVG9wU21hbGwiPiRRRGF0YXsiQ29tbWVudCJ9PC9wPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgo8IS0tIGR0bDpibG9jazpPdmVydmlld01vZHVsZVJvdyAtLT4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdNb2R1bGVSb3dUZXh0QXJlYSAtLT4KICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9IkNoZWNrUmVzdWx0IENoZWNrUmVzdWx0JFFEYXRheyJDaGVjayJ9Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGgzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gdGl0bGU9IiRRRGF0YXsiQ2hlY2sifSIgY2xhc3M9IkZsYWcgU21hbGwiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPiRRRGF0YXsiQ2hlY2sifTwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvc3Bhbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICRRRGF0YXsiRGVzY3JpcHRpb24ifQogICAgICAgICAgICAgICAgICAgICAgICA8L2gzPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iU3BhY2luZ1RvcFNtYWxsIj4kUURhdGF7IkNvbW1lbnQifTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iU3BhY2luZyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGV4dGFyZWEgY2xhc3M9IlcxMDBwYyIgcm93cz0iNyIgY29scz0iIiByZWFkb25seT0icmVhZG9ubHkiPiRRRGF0YXsiQ29udGVudFN0cmluZyJ9PC90ZXh0YXJlYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TW9kdWxlUm93VGV4dEFyZWEgLS0+CgoKCjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TW9kdWxlUm93VGFibGVEYXRhU2ltcGxlIC0tPgogICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0iQ2hlY2tSZXN1bHQgQ2hlY2tSZXN1bHQkUURhdGF7IkNoZWNrIn0iPgogICAgICAgICAgICAgICAgICAgICAgICA8aDM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB0aXRsZT0iJFFEYXRheyJDaGVjayJ9IiBjbGFzcz0iRmxhZyBTbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+JFFEYXRheyJDaGVjayJ9PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJFFEYXRheyJEZXNjcmlwdGlvbiJ9CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJTcGFjaW5nVG9wU21hbGwiPiRRRGF0YXsiQ29tbWVudCJ9PC9wPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJTcGFjaW5nIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0iRGF0YVRhYmxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iQ2VudGVyIj5JdGVtPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iQ2VudGVyIj5WYWx1ZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3TW9kdWxlVGFibGVSb3cgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48c3Ryb25nPiRRRGF0YXsiSXRlbUtleSJ9PC9zdHJvbmc+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD4kUURhdGF7IlZhbHVlIn08L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgo8IS0tIGR0bDpibG9jazpPdmVydmlld01vZHVsZVRhYmxlUm93IC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdNb2R1bGVSb3dUYWJsZURhdGFTaW1wbGUgLS0+CgoKCgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KPCEtLSBkdGw6YmxvY2s6T3ZlcnZpZXdNb2R1bGUgLS0+CiAgICA8L2Rpdj4KPC9kaXY+CjwhLS0gZHRsOmJsb2NrOk92ZXJ2aWV3IC0tPgoKCiMgLS0tCiMgLSBTdXBwb3J0bW9kdWxlIGNvbmZpZGVudGlhbCBwYWdlCiMgLS0tCgo8IS0tIGR0bDpibG9jazpDb25maWRlbnRpYWwgLS0+CjxkaXYgY2xhc3M9Ik1haW5Cb3ggQVJJQVJvbGVNYWluIExheW91dEZpeGVkU2lkZWJhciBTaWRlYmFyRmlyc3QiPgogICAgPGgxPiRUZXh0eyJBZG1pbiBTdXBwb3J0IEluZm8ifTwvaDE+CiAgICA8ZGl2IGNsYXNzPSJTaWRlYmFyQ29sdW1uIj4KICAgICAgICA8ZGl2IGNsYXNzPSJXaWRnZXRTaW1wbGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJIZWFkZXIiPgogICAgICAgICAgICAgICAgPGgyPiRUZXh0eyJBY3Rpb25zIn08L2gyPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ29udGVudCI+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9IkFjdGlvbkxpc3QiPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iJEVudnsiQmFzZWxpbmsifUFjdGlvbj0kRW52eyJBY3Rpb24ifSIgY2xhc3M9IkNhbGxGb3JBY3Rpb24iPjxzcGFuPiRUZXh0eyJHbyB0byBvdmVydmlldyJ9PC9zcGFuPjwvYT4KICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgIDxsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iJEVudnsiQmFzZWxpbmsifUFjdGlvbj0kRW52eyJBY3Rpb24ifTtTdWJhY3Rpb249QmVuY2htYXJrU1FMSW5pdCIgY2xhc3M9IkNhbGxGb3JBY3Rpb24iPjxzcGFuPiRUZXh0eyJTUUwgYmVuY2htYXJrIn08L3NwYW4+PC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9IkNvbnRlbnRDb2x1bW4iPgogICAgICAgIDxkaXYgY2xhc3M9IldpZGdldFNpbXBsZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IkhlYWRlciI+CiAgICAgICAgICAgICAgICA8aDI+JFRleHR7IkNvbmZpZGVudGlhbCBpbmZvcm1hdGlvbiJ9PC9oMj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IkNvbnRlbnQgQ2VudGVyIj4KCiRJbmNsdWRleyJBZG1pblN1cHBvcnRMaWNlbnNlVGV4dCJ9CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ29udGVudCBDZW50ZXJCb3ggVzUwcGMiPgogICAgICAgICAgICAgICAgICAgIDxmb3JtIGFjdGlvbj0iJEVudnsiQ0dJSGFuZGxlIn0iIG1ldGhvZD0icG9zdCIgY2xhc3M9IlJpZ2h0IFNwYWNpbmdUb3BTbWFsbCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IkFjdGlvbiIgdmFsdWU9IiRFbnZ7IkFjdGlvbiJ9Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlN1YmFjdGlvbiIgdmFsdWU9IlNlbmRlckluZm9ybWF0aW9uIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9IlByaW1hcnkiIHR5cGU9InN1Ym1pdCIgdmFsdWU9IiRUZXh0eyJBY2NlcHQgbGljZW5zZSJ9Ij4kVGV4dHsiQWNjZXB0IGxpY2Vuc2UifTwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgICAgICA8Zm9ybSBhY3Rpb249IiRFbnZ7IkNHSUhhbmRsZSJ9IiBtZXRob2Q9InBvc3QiIGNsYXNzPSJSaWdodCBTcGFjaW5nVG9wU21hbGwiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJBY3Rpb24iIHZhbHVlPSIkRW52eyJBY3Rpb24ifSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9InN1Ym1pdCIgdmFsdWU9IiRUZXh0eyJEb24ndCBhY2NlcHQgbGljZW5zZSJ9Ij4kVGV4dHsiRG9uJ3QgYWNjZXB0IGxpY2Vuc2UifTwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDwvZm9ybT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KPCEtLSBkdGw6YmxvY2s6Q29uZmlkZW50aWFsIC0tPgoKCiMgLS0tCiMgLSBTdXBwb3J0bW9kdWxlIHNlbmRlciBhbmQgc3lzdGVtIGluZm9ybWF0aW9uCiMgLS0tCgo8IS0tIGR0bDpibG9jazpTZW5kZXJJbmZvcm1hdGlvbiAtLT4KPGRpdiBjbGFzcz0iTWFpbkJveCBBUklBUm9sZU1haW4gTGF5b3V0Rml4ZWRTaWRlYmFyIFNpZGViYXJGaXJzdCI+CiAgICA8aDE+JFRleHR7IkFkbWluIFN1cHBvcnQgSW5mbyJ9PC9oMT4KICAgIDxkaXYgY2xhc3M9IlNpZGViYXJDb2x1bW4iPgogICAgICAgIDxkaXYgY2xhc3M9IldpZGdldFNpbXBsZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IkhlYWRlciI+CiAgICAgICAgICAgICAgICA8aDI+JFRleHR7IkFjdGlvbnMifTwvaDI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJDb250ZW50Ij4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iQWN0aW9uTGlzdCI+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIkRW52eyJCYXNlbGluayJ9QWN0aW9uPSRFbnZ7IkFjdGlvbiJ9IiBjbGFzcz0iQ2FsbEZvckFjdGlvbiI+PHNwYW4+JFRleHR7IkdvIHRvIG92ZXJ2aWV3In08L3NwYW4+PC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9IkNvbnRlbnRDb2x1bW4iPgogICAgICAgIDxkaXYgY2xhc3M9IldpZGdldFNpbXBsZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IkhlYWRlciI+CiAgICAgICAgICAgICAgICA8aDI+JFRleHR7IlZlbmRvciBTdXBwb3J0In08L2gyPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ29udGVudCBXaXRoUGFkZGluZyI+CiAgICAgICAgICAgICAgICA8Zm9ybSBhY3Rpb249IiRFbnZ7IkNHSUhhbmRsZSJ9IiBtZXRob2Q9InBvc3QiIG5hbWU9ImNvbXBvc2UiPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IkFjdGlvbiIgdmFsdWU9IiRFbnZ7IkFjdGlvbiJ9Ii8+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU3ViYWN0aW9uIiB2YWx1ZT0iU3VibWl0Ii8+CjwhLS0gZHRsOmJsb2NrOlNlbmRlckluZm9ybWF0aW9uSGlkZGVuIC0tPgogICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IiRRRGF0YXsiTmFtZSJ9IiB2YWx1ZT0iJFFEYXRheyJWYWx1ZSJ9Ii8+CjwhLS0gZHRsOmJsb2NrOlNlbmRlckluZm9ybWF0aW9uSGlkZGVuIC0tPgogICAgICAgICAgICAgICAgICAgIDxmaWVsZHNldCBjbGFzcz0iVGFibGVMaWtlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iU2FsdXRhdGlvbiI+JFRleHR7IlNhbHV0YXRpb24ifTo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJGaWVsZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9IlNhbHV0YXRpb24iIG5hbWU9IlNhbHV0YXRpb24iIHZhbHVlPSIkUURhdGF7IlNlbmRlclNhbHV0YXRpb24ifSIgY2xhc3M9Ilc1MHBjIiByZWFkb25seT0icmVhZG9ubHkiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJDbGVhciI+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJOYW1lIj4kVGV4dHsiTmFtZSJ9OjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iTmFtZSIgbmFtZT0iTmFtZSIgdmFsdWU9IiRRRGF0YXsiU2VuZGVyTmFtZSJ9IiBjbGFzcz0iVzUwcGMiIHJlYWRvbmx5PSJyZWFkb25seSIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkNsZWFyIj48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9IlNlbmRlciI+JFRleHR7IkVtYWlsIn06PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iRmllbGQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJTZW5kZXIiIG5hbWU9IlNlbmRlciIgdmFsdWU9IiRRRGF0YXsiU2VuZGVyQWRyZXNzIn0iIGNsYXNzPSJXNTBwYyIgcmVhZG9ubHk9InJlYWRvbmx5IiAvPgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iQ2xlYXIiPjwvZGl2PgoKICAgICAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iQ29tcGFueSI+JFRleHR7IkNvbXBhbnkifTo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJGaWVsZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgdHlwZT0idGV4dCIgaWQ9IkNvbXBhbnkiIG5hbWU9IkNvbXBhbnkiIHZhbHVlPSIiIGNsYXNzPSJXNTBwYyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkNsZWFyIj48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9IlN0cmVldCI+JFRleHR7IlN0cmVldCJ9OjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iU3RyZWV0IiBuYW1lPSJTdHJlZXQiIHZhbHVlPSIiIGNsYXNzPSJXNTBwYyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkNsZWFyIj48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9IlppcCI+JFRleHR7IlppcCJ9OjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iWmlwIiBuYW1lPSJaaXAiIHZhbHVlPSIiIGNsYXNzPSJXNTBwYyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkNsZWFyIj48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9IkNpdHkiPiRUZXh0eyJDaXR5In06PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iRmllbGQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJDaXR5IiBuYW1lPSJDaXR5IiB2YWx1ZT0iIiBjbGFzcz0iVzUwcGMiIC8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJDbGVhciI+PC9kaXY+CgogICAgICAgICAgICAgICAgICAgICAgICA8bGFiZWwgZm9yPSJQaG9uZSI+JFRleHR7IlBob25lIn06PC9sYWJlbD4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iRmllbGQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9InRleHQiIGlkPSJQaG9uZSIgbmFtZT0iUGhvbmUiIHZhbHVlPSIiIGNsYXNzPSJXNTBwYyIgLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkNsZWFyIj48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxsYWJlbCBmb3I9IkJ1Z3ppbGxhSUQiPiRUZXh0eyJCdWd6aWxsYSBJRCJ9OjwvbGFiZWw+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0iQnVnemlsbGFJRCIgbmFtZT0iQnVnemlsbGFJRCIgdmFsdWU9IiIgY2xhc3M9Ilc1MHBjIiAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9IkZpZWxkRXhwbGFuYXRpb24iPiRUZXh0eyJJZiB5b3UndmUgYWxyZWFkeSBhZGRlZCBhIEJ1Z3ppbGxhIHJlcG9ydCBhdCBidWdzLm90cnMub3JnLCBwbGVhc2UgYWRkIHlvdXIgQnVnemlsbGEgSUQgaGVyZS4ifTwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkNsZWFyIj48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IlZhbHVlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+JFRleHR7IlNlcnZpY2UgU3Vic2NyaXB0aW9uIn08L3N0cm9uZz48YnIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9IlNlbmRJbmZvIiBuYW1lPSJTZW5kSW5mbyIgdmFsdWU9IjEiIGNoZWNrZWQ9ImNoZWNrZWQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkVGV4dHsiUGxlYXNlIHJlY29tbWVuZCBtZSBhIFNlcnZpY2UgU3Vic2NyaXB0aW9uIHRvIG9wdGltaXplIG15IE9UUlMifS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkNsZWFyIj48L2Rpdj4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkZpZWxkIFNwYWNpbmdUb3AiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJidXR0b24iIHR5cGU9InN1Ym1pdCIgaWQ9IkRvd25sb2FkIiBuYW1lPSJEb3dubG9hZCIgdmFsdWU9IiRUZXh0eyJEb3dubG9hZCJ9Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImJ1dHRvbiIgdHlwZT0ic3VibWl0IiBpZD0iU2VuZCIgbmFtZT0iU2VuZCIgdmFsdWU9IiRUZXh0eyJTZW5kIn0iLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkNsZWFyIj48L2Rpdj4KICAgICAgICAgICAgICAgICAgICA8L2ZpZWxkc2V0PgogICAgICAgICAgICAgICAgPC9mb3JtPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KPCEtLSBkdGw6anNfb25fZG9jdW1lbnRfY29tcGxldGUgLS0+CiAgICAgICAgPHNjcmlwdCB0eXBlPSJ0ZXh0L2phdmFzY3JpcHQiPi8vPCFbQ0RBVEFbCiAgICAgICAgICAgICQoJyNEb3dubG9hZCcpLmJpbmQoJ2NsaWNrJywgZnVuY3Rpb24gKEV2ZW50KSB7CiAgICAgICAgICAgICAgICBpZiAoJCgnI1NlbmRlcicpLnZhbCgpID09ICcnKSB7CiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJyRKU1RleHR7IkNhbid0IGNyZWF0ZSBzdXBwb3J0IHBhY2thZ2UsIGJlY2F1c2UgeW91IHdvcmsgY3VycmVudGx5IHdpdGggdGhlIHN5c3RlbSB1c2VyIHJvb3RAbG9jYWxob3N0IGFuZCB5b3VyIGFkbWluIGVtYWlsIGFkZHJlc3MgaXMgbm90IHlldCBjb25maWd1cmVkLiBQbGVhc2UgZGVmaW5lIHRoZSBhZG1pbiBlbWFpbCBzZXR0aW5nIGluIHRoZSBTeXNDb25maWcgbW9kdWxlIGFuZCBkb24ndCB1c2UgdGhlIHVzZXIgcm9vdEBsb2NhbGhvc3QgZm9yIHdvcmtpbmcgd2l0aCBPVFJTLiJ9Jyk7CiAgICAgICAgICAgICAgICAgICAgJCgnI1NlbmRlcicpLmZvY3VzKCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgJCgnI1NlbmQnKS5iaW5kKCdjbGljaycsIGZ1bmN0aW9uIChFdmVudCkgewogICAgICAgICAgICAgICAgaWYgKCEkKCcjU2VuZEluZm8nKS5hdHRyKCdjaGVja2VkJykpIHsKICAgICAgICAgICAgICAgICAgICBhbGVydCgnJEpTVGV4dHsiUGxlYXNlIGNvbmZpcm0gdGhlIGNvbmZpZGVudGlhbCBpbmZvcm1hdGlvbiB0byBjb250aW51ZS4ifScpOwogICAgICAgICAgICAgICAgICAgICQoJyNTZW5kSW5mbycpLmZvY3VzKCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIC8vXV0+PC9zY3JpcHQ+CjwhLS0gZHRsOmpzX29uX2RvY3VtZW50X2NvbXBsZXRlIC0tPgo8IS0tIGR0bDpibG9jazpTZW5kZXJJbmZvcm1hdGlvbiAtLT4KCgojIC0tLQojIC0gU3VwcG9ydG1vZHVsZSBiZW5jaG1hcmsgcmVzdWx0CiMgLS0tCgo8IS0tIGR0bDpibG9jazpCZW5jaG1hcmtSZXN1bHQgLS0+CjxkaXYgY2xhc3M9IkhlYWRlciI+CiAgICA8aDI+JFRleHR7IlJlc3VsdCJ9OiAkVGV4dHsiJERhdGF7IkhlYWQifSJ9PC9oMj4KPC9kaXY+CjxkaXYgY2xhc3M9IkNvbnRlbnQiPgogICAgPHRhYmxlIGNsYXNzPSJEYXRhVGFibGUiPgogICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgPHRoIGNsYXNzPSJXMjBwYyI+JFRleHR7IktleSJ9PC90aD4KICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iVzIwcGMiPiRUZXh0eyJWYWx1ZSJ9PC90aD4KICAgICAgICAgICAgICAgIDx0aCBjbGFzcz0iVzIwcGMiPiRUZXh0eyJUaW1lIn08L3RoPgogICAgICAgICAgICAgICAgPHRoPiRUZXh0eyJDb21tZW50In08L3RoPgogICAgICAgICAgICA8L3RyPgogICAgICAgIDwvdGhlYWQ+CiAgICAgICAgPHRib2R5Pgo8IS0tIGR0bDpibG9jazpCZW5jaG1hcmtSZXN1bHRSb3cgLS0+CiAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgIDx0ZD4kUURhdGF7IktleSJ9OjwvdGQ+CiAgICAgICAgICAgICAgICA8dGQ+JFFEYXRheyJWYWx1ZSJ9PC90ZD4KICAgICAgICAgICAgICAgIDx0ZD4KICAgICAgICAgICAgICAgICAgICAkUURhdGF7IlRpbWUifSBzICRRRGF0YXsiTW9vZCJ9CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPHRkPgo8IS0tIGR0bDpibG9jazpCZW5jaG1hcmtSZXN1bHRSb3dGaW5lIC0tPgogICAgICAgICAgICAgICAgICAgICRUZXh0eyJMb29rcyBmaW5lISJ9CjwhLS0gZHRsOmJsb2NrOkJlbmNobWFya1Jlc3VsdFJvd0ZpbmUgLS0+CjwhLS0gZHRsOmJsb2NrOkJlbmNobWFya1Jlc3VsdFJvd09LIC0tPgogICAgICAgICAgICAgICAgICAgICRUZXh0eyJPayJ9CjwhLS0gZHRsOmJsb2NrOkJlbmNobWFya1Jlc3VsdFJvd09LIC0tPgo8IS0tIGR0bDpibG9jazpCZW5jaG1hcmtSZXN1bHRSb3dXcm9uZyAtLT4KICAgICAgICAgICAgICAgICAgICAkVGV4dHsiU2hvdWxkIG5vdCB0YWtlIG1vcmUgdGhhbiJ9ICREYXRheyJTaG91bGRUYWtlIn0ncyAkVGV4dHsib24gYW4gYXZlcmFnZSBzeXN0ZW0ifS4KPCEtLSBkdGw6YmxvY2s6QmVuY2htYXJrUmVzdWx0Um93V3JvbmcgLS0+CiAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICA8L3RyPgo8IS0tIGR0bDpibG9jazpCZW5jaG1hcmtSZXN1bHRSb3cgLS0+CiAgICAgICAgPC90Ym9keT4KICAgIDwvdGFibGU+CjwvZGl2Pgo8IS0tIGR0bDpibG9jazpCZW5jaG1hcmtSZXN1bHQgLS0+CgoKIyAtLS0KIyAtIFN1cHBvcnRtb2R1bGUgQmVuY2htYXJrIFJlc3VsdCBJbml0IHBhZ2UKIyAtLS0KCjwhLS0gZHRsOmJsb2NrOkJlbmNobWFya1Jlc3VsdEluaXQgLS0+CjxkaXYgY2xhc3M9Ik1haW5Cb3ggQWRtaW5TdXBwb3J0IEFSSUFSb2xlTWFpbiBMYXlvdXRGaXhlZFNpZGViYXIgU2lkZWJhckZpcnN0Ij4KICAgIDxoMT4kVGV4dHsiQmVuY2htYXJrIn08L2gxPgoKICAgIDxkaXYgY2xhc3M9IlNpZGViYXJDb2x1bW4iPgogICAgICAgIDxkaXYgY2xhc3M9IldpZGdldFNpbXBsZSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IkhlYWRlciI+CiAgICAgICAgICAgICAgICA8aDI+JFRleHR7IkFjdGlvbnMifTwvaDI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSdDb250ZW50Jz4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0iQWN0aW9uTGlzdCI+CiAgICAgICAgICAgICAgICAgICAgPGxpPgogICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIkRW52eyJCYXNlbGluayJ9QWN0aW9uPSRFbnZ7IkFjdGlvbiJ9IiBjbGFzcz0iQ2FsbEZvckFjdGlvbiI+PHNwYW4+JFRleHR7IkdvIHRvIG92ZXJ2aWV3In08L3NwYW4+PC9hPgogICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJXaWRnZXRTaW1wbGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJIZWFkZXIiPgogICAgICAgICAgICAgICAgPGgyPiRUZXh0eyJOb3RlIn08L2gyPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0nQ29udGVudCc+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0iU3BhY2luZ0JvdHRvbSI+CiAgICAgICAgICAgICAgICAgICAgJFRleHR7IkV4ZWN1dGUgYSBTUUwgYmVuY2htYXJrIHRlc3Qgb24geW91ciBkYXRhYmFzZSB0byBmaW5kIG91dCBob3cgZmFzdCB5b3VyIGRhdGFiYXNlIGlzIChkb25lIG9uIGRlZGljYXRlZCBiZW5jaG1hcmsgdGFibGUpLiJ9CiAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8cCBjbGFzcz0iV2FybmluZyI+CiAgICAgICAgICAgICAgICAgICAgJFRleHR7IlRoaXMgc2hvdWxkIG5vdCBiZSBkb25lIG9uIHByb2R1Y3Rpb24gc3lzdGVtcyEifQogICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9IkNvbnRlbnRDb2x1bW4iPgogICAgICAgIDxkaXYgY2xhc3M9IldpZGdldFNpbXBsZSIgaWQ9IlNRTEJlbmNobWFya1dpZGdldCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9IkhlYWRlciI+CiAgICAgICAgICAgICAgICA8aDI+JFRleHR7IlNRTCBiZW5jaG1hcmsifTwvaDI+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJDb250ZW50Ij4KICAgICAgICAgICAgICAgIDxpbnB1dCB0eXBlPSJoaWRkZW4iIGlkPSJVUkwiIG5hbWU9IlVSTCIgdmFsdWU9IiRFbnZ7IkJhc2VsaW5rIn1BY3Rpb249JEVudnsiQWN0aW9uIn07U3ViYWN0aW9uPUJlbmNobWFya1NRTCIvPgogICAgICAgICAgICAgICAgPGZpZWxkc2V0IGNsYXNzPSJUYWJsZUxpa2UgVG9nZ2xlIiA+CiAgICAgICAgICAgICAgICAgICAgPGxhYmVsIGZvcj0iTW9kZSI+JFRleHR7Ik11bHRpcGxpZXIifTo8L2xhYmVsPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgJERhdGF7Ik1vZGVTdHJnIn0KICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9IkZpZWxkRXhwbGFuYXRpb24iPiRUZXh0eyJQbGVhc2Ugc2VsZWN0IGEgbXVsdGlwbGllciBhbmQgcHJlc3Mgc3RhcnQgYnV0dG9uLiJ9PC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkZpZWxkIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBpZD0iU2VuZFJlcXVlc3QiIGNsYXNzPSJQcmltYXJ5IiB2YWx1ZT0iJFRleHR7IlN0YXJ0In0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+JFRleHR7IlN0YXJ0In08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9IkNsZWFyIj48L2Rpdj4KICAgICAgICAgICAgICAgIDwvZmllbGRzZXQ+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGlkPSJDb250ZW50VG9VcGRhdGUiIGNsYXNzPSJXaWRnZXRTaW1wbGUgSGlkZGVuIj48L2Rpdj4KICAgIDwvZGl2Pgo8L2Rpdj4KPCEtLSBkdGw6anNfb25fZG9jdW1lbnRfY29tcGxldGUgLS0+CjxzY3JpcHQgdHlwZT0idGV4dC9qYXZhc2NyaXB0Ij4vLzwhW0NEQVRBWwokKCcjU2VuZFJlcXVlc3QnKS5iaW5kKCdjbGljaycsIGZ1bmN0aW9uIChFdmVudCkgewogICAgJCgnI1NRTEJlbmNobWFya1dpZGdldCcpLmFkZENsYXNzKCdMb2FkaW5nJyk7CiAgICAkKCcjU2VuZFJlcXVlc3QnKS5hdHRyKCdkaXNhYmxlZCcsIHRydWUpOwogICAgdmFyIFVSTCA9ICQoJyNVUkwnKS52YWwoKSArICc7TW9kZT0nICsgJCgnI01vZGUnKS52YWwoKTsKICAgIENvcmUuQUpBWC5Db250ZW50VXBkYXRlKCQoJyNDb250ZW50VG9VcGRhdGUnKSwgVVJMLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgJCgnI0NvbnRlbnRUb1VwZGF0ZScpLnNob3coKTsKICAgICAgICAkKCcjU1FMQmVuY2htYXJrV2lkZ2V0JykucmVtb3ZlQ2xhc3MoJ0xvYWRpbmcnKTsKICAgICAgICAkKCcjU2VuZFJlcXVlc3QnKS5hdHRyKCdkaXNhYmxlZCcsIGZhbHNlKTsKICAgIH0pOwogICAgcmV0dXJuIGZhbHNlOwp9KTsKLy9dXT48L3NjcmlwdD4KPCEtLSBkdGw6anNfb25fZG9jdW1lbnRfY29tcGxldGUgLS0+Cgo8IS0tIGR0bDpibG9jazpCZW5jaG1hcmtSZXN1bHRJbml0IC0tPgo=</File>
        <File Location="Kernel/Output/HTML/Standard/AdminSupportLicenseText.dtl" Permission="644" Encode="Base64">IyAtLQojIEFkbWluU3VwcG9ydExpY2Vuc2VUZXh0LmR0bCAtIHByb3ZpZGVzIHRoZSBsaWNlbnNlIGRlZmluaXRpb24gZm9yIHRoZSBTdXBwb3J0CiMgQ29weXJpZ2h0IChDKSAyMDAxLTIwMTAgT1RSUyBBRywgaHR0cDovL290cnMub3JnLwojIC0tCiMgJElkOiBBZG1pblN1cHBvcnRMaWNlbnNlVGV4dC5kdGwsdiAxLjIgMjAxMC8wOS8xMCAwNzo0NDo0MiBtZyBFeHAgJAojIC0tCiMgVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKIyB0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CiMgZGlkIG5vdCByZWNlaXZlIHRoaXMgZmlsZSwgc2VlIGh0dHA6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy9hZ3BsLnR4dC4KIyAtLQoKPCEtLSBkdGw6YmxvY2s6Q29uZmlkZW50aWFsQ29udGVudERFIC0tPgogICAgICAgICAgICAgICAgPHRleHRhcmVhIG5hbWU9IkNvbmZpZGVudGlhbCIgcm93cz0iMjIiIGNvbHM9Ijc4IiByZWFkb25seT0icmVhZG9ubHkiPkRhdGVuc2NodXR6CgpXaXIsIGRpZSBGaXJtYSBPVFJTIEFHLCBuZWhtZW4gZGVuIFNjaHV0eiBJaHJlciBwZXJzJm91bWw7bmxpY2hlbiBEYXRlbiBzZWhyIGVybnN0IHVuZCBoYWx0ZW4gdW5zIHN0cmlrdCBhbiBkaWUgUmVnZWxuIGRlciBEYXRlbnNjaHV0emdlc2V0emUuIEFsbGUgUGFzc3cmb3VtbDtydGVyIHdlcmRlbiB2b3IgZGVtIFZlcnNlbmRlbiBkZXIgSW5mb3JtYXRpb25lbiBhdXRvbWF0aXNpZXJ0IHVua2VubnRsaWNoIGdlbWFjaHQuIEluIGtlaW5lbSBGYWxsIHdlcmRlbiBkaWUgZXJob2JlbmVuIERhdGVuIHZlcmthdWZ0IG9kZXIgYXVzIGFuZGVyZW4gR3ImdXVtbDtuZGVuIGFuIHVuYXV0b3Jpc2llcnRlIERyaXR0ZSB3ZWl0ZXJnZWdlYmVuLgoKRGllIG5hY2hmb2xnZW5kZSBFcmtsJmF1bWw7cnVuZyBnaWJ0IElobmVuIGVpbmVuICZVdW1sO2JlcmJsaWNrIGRhciZ1dW1sO2Jlciwgd2llIHdpciBkaWVzZW4gU2NodXR6IGdldyZhdW1sO2hybGVpc3RlbiB1bmQgd2VsY2hlIEFydCB2b24gRGF0ZW4genUgd2VsY2hlbSBad2VjayAmdXVtbDtiZXJtaXR0ZWx0IHdlcmRlbi4KCkRhdGVuJnV1bWw7YmVybWl0dGx1bmcgZHVyY2ggZGFzICdTdXBwb3J0bW9kdWwnCkRpZSBGaXJtYSBPVFJTIEFHICZ1dW1sO2Jlcm1pdHRlbHQgdW5kIHNwZWljaGVydCBJbmZvcm1hdGlvbmVuLCBkaWUgZHVyY2ggZGFzICdTdXBwb3J0bW9kdWwnIGFuIGRpZSBGaXJtYSBPVFJTIEFHIHZlcnNlbmRldCB3ZXJkZW4uIERhYmVpIGhhbmRlbHQgZXMgc2ljaCB1bSBhdXNzY2hsaWUmc3psaWc7bGljaCB1bSBEYXRlbiwgZGllIGRpZSBGaXJtYSBPVFJTIEFHIGJlbiZvdW1sO3RpZ3QsIHVtIEZ1bmt0aW9uc2YmYXVtbDtoaWdrZWl0IHVuZCBMZWlzdHVuZ3NmJmF1bWw7aGlna2VpdCBkZXMgYmV0cm9mZmVuZW4gT1RSUy1TZXJ2ZXJzIHp1IGFuYWx5c2llcmVuLCBvZGVyIHVtIGVpbmUgS29udGFrdGF1Zm5haG1lIHp1IGVybSZvdW1sO2dsaWNoZW4uCgpTaWNoZXJoZWl0IElocmVyIHBlcnMmb3VtbDtubGljaGVuIERhdGVuCkRpZSBGaXJtYSBPVFJTIEFHIHNjaCZ1dW1sO3R6dCBJaHJlIHBlcnMmb3VtbDtubGljaGVuIERhdGVuIHZvciB1bmVybGF1YnRlbiBadWdyaWZmLCBWZXJ3ZW5kdW5nIG9kZXIgVmVyJm91bWw7ZmZlbnRsaWNodW5nLiBEaWUgRmlybWEgT1RSUyBBRyBzb3JndCBkYWYmdXVtbDtyLCBkYXNzIHZvbiBJaG5lbiBhdWYgZGVtIFNlcnZlciBnZXNwZWljaGVydGUgcGVycyZvdW1sO25saWNoZSBJbmZvcm1hdGlvbmVuIGluIGVpbmVyIGtvbnRyb2xsaWVydGVuLCBzaWNoZXJlbiBVbWdlYnVuZyB2b3IgdW5lcmxhdWJ0ZW0gWnVncmlmZiB1bmQgVmVyJm91bWw7ZmZlbnRsaWNodW5nIGdlc2NoJlV1bWw7dHp0IHNpbmQuCgpXZWl0ZXJnYWJlIElocmVyIERhdGVuCkRpZSBGaXJtYSBPVFJTIEFHIGdpYnQgSWhyZSBEYXRlbiBuaWNodCBhbiBEcml0dGUgd2VpdGVyLCBzb2Zlcm4gZGllcyBuaWNodCB6dXIgQWJ3aWNrbHVuZyBkZXMgR2VzY2gmYXVtbDtmdHN2ZXJrZWhyZXMgbiZvdW1sO3RpZyBpc3QuClNvd2VpdCBkaWUgRmlybWEgT1RSUyBBRyBnZXNldHpsaWNoIG9kZXIgcGVyIEdlcmljaHRzYmVzY2hsdXNzIGRhenUgdmVycGZsaWNodGV0IGlzdCwgZ2ViZW4gd2lyIElocmUgRGF0ZW4gbnVyIGFuIGF1c2t1bmZ0c2JlcmVjaHRpZ3RlIHN0YWF0bGljaGUgSW5zdGl0dXRpb25lbiB1bmQgQmVoJm91bWw7cmRlbiB3ZWl0ZXIuCgomQXVtbDtuZGVydW5nIGRpZXNlciBEYXRlbnNjaHV0emJlc3RpbW11bmdlbgpEaWUgRmlybWEgT1RSUyBBRyBiZWgmYXVtbDtsdCBzaWNoIGRhcyBSZWNodCB2b3IsIGRpZXNlIFNpY2hlcmhlaXRzLSB1bmQgRGF0ZW5zY2h1dHptYSZzemxpZztuYWhtZW4genUgdmVyJmF1bWw7bmRlcm4sIHNvd2VpdCBkaWVzIHdlZ2VuIGRlciB0ZWNobmlzY2hlbiBFbnR3aWNrbHVuZyBlcmZvcmRlcmxpY2ggd2lyZC4gSW4gc29sY2hlbiBGJmF1bWw7bGxlbiB3ZXJkZW4gd2lyIGF1Y2ggdW5zZXJlIEhpbndlaXNlIHp1bSBEYXRlbnNjaHV0eiBlbnRzcHJlY2hlbmQgYW5wYXNzZW4uIEJpdHRlIGJlYWNodGVuIFNpZSBkYWhlciBkaWUgamV3ZWlscyBha3R1ZWxsZSBWZXJzaW9uIHVuc2VyZXIgRGF0ZW5zY2h1dHplcmtsJmF1bWw7cnVuZy4KCkF1c2t1bmZ0c3JlY2h0ClNpZSBoYWJlbiBqZWRlcnplaXQgZGFzIFJlY2h0IGF1ZiBBdXNrdW5mdCAmdXVtbDtiZXIgZGllIGJleiZ1dW1sO2dsaWNoIElocmVyIFBlcnNvbiBnZXNwZWljaGVydGVuIERhdGVuLCBkZXJlbiBIZXJrdW5mdCB1bmQgRW1wZiZhdW1sO25nZXIgc293aWUgZGVuIFp3ZWNrIGRlciBEYXRlbnZlcmFyYmVpdHVuZy4gQXVza3VuZnQgJnV1bWw7YmVyIGRpZSBnZXNwZWljaGVydGVuIERhdGVuIGsmb3VtbDtubmVuIFNpZSB1bnRlciBpbmZvQG90cnMuY29tIGFuZm9yZGVybi4KCldlaXRlcmUgSW5mb3JtYXRpb25lbgpJaHIgVmVydHJhdWVuIGlzdCB1bnMgd2ljaHRpZy4gRGFoZXIgZ2ViZW4gd2lyIElobmVuIGdlcm5lIGplZGVyemVpdCBBdXNrdW5mdCAmdXVtbDtiZXIgZGllIFZlcmFyYmVpdHVuZyBJaHJlciBwZXJzb25lbmJlem9nZW5lbiBEYXRlbi4gV2VubiBTaWUgRnJhZ2VuIGhhYmVuLCBkaWUgSWhuZW4gZGllc2UgRGF0ZW5zY2h1dHplcmtsJmF1bWw7cnVuZyBuaWNodCBiZWFudHdvcnRlbiBrb25udGUgb2RlciB3ZW5uIFNpZSB3ZWl0ZXJlIEluZm9ybWF0aW9uZW4genUgZWluZW0gUHVua3QgdyZ1dW1sO25zY2hlbiwgd2VuZGVuIFNpZSBzaWNoIGJpdHRlIG1pdCBlaW5lciBFLU1haWwgYW4gaW5mb0BvdHJzLmNvbS4KICAgICAgICAgICAgICAgIDwvdGV4dGFyZWE+CjwhLS0gZHRsOmJsb2NrOkNvbmZpZGVudGlhbENvbnRlbnRERSAtLT4KPCEtLSBkdGw6YmxvY2s6Q29uZmlkZW50aWFsQ29udGVudEVOIC0tPgogICAgICAgICAgICAgICAgPHRleHRhcmVhIG5hbWU9IkNvbmZpZGVudGlhbCIgcm93cz0iMjIiIGNvbHM9Ijc4IiByZWFkb25seT0icmVhZG9ubHkiPkRhdGEgUHJvdGVjdGlvbgoKSGVyZSBhdCBPVFJTIEFHIHdlIHRha2UgdGhlIHByb3RlY3Rpb24gb2YgeW91ciBwZXJzb25hbCBkZXRhaWxzIHZlcnkgc2VyaW91c2x5IGFuZCBzdHJpY3RseSBhZGhlcmUgdG8gZGF0YSBwcm90ZWN0aW9uIGxhd3MuIEFsbCBwYXNzd29yZHMgYXJlIGF1dG9tYXRpY2FsbHkgbWFkZSB1bnJlY29nbml6YWJsZSBiZWZvcmUgdGhlIGluZm9ybWF0aW9uIGlzIHNlbnQuIFVuZGVyIG5vIGNpcmN1bXN0YW5jZXMgd2lsbCBhbnkgZGF0YSB3ZSBvYnRhaW4gYmUgc29sZCBvciBwYXNzZWQgb24gdG8gdW5hdXRob3JpemVkIHRoaXJkIHBhcnRpZXMuClRoZSBmb2xsb3dpbmcgZXhwbGFuYXRpb24gcHJvdmlkZXMgeW91IHdpdGggYW4gb3ZlcnZpZXcgb2YgaG93IHdlIGd1YXJhbnRlZSB0aGlzIHByb3RlY3Rpb24gYW5kIHdoaWNoIHR5cGUgb2YgZGF0YSBpcyBjb2xsZWN0ZWQgZm9yIHdoaWNoIHB1cnBvc2UuCgpEYXRhIEhhbmRsaW5nIHdpdGggJ1N1cHBvcnQgTW9kdWxlJwpJbmZvcm1hdGlvbiByZWNlaXZlZCB0aHJvdWdoIHRoZSAnU3VwcG9ydCBNb2R1bGUnIGlzIHNhdmVkIGJ5IE9UUlMgQUcuIFRoaXMgb25seSBhcHBsaWVzIHRvIGRhdGEgdGhhdCBPVFJTIEFHIHJlcXVpcmVzIHRvIGFuYWx5emUgdGhlIHBlcmZvcm1hbmNlIGFuZCBmdW5jdGlvbiBvZiB0aGUgT1RSUyBzZXJ2ZXIgb3IgdG8gZXN0YWJsaXNoIGNvbnRhY3QuCgpTYWZldHkgb2YgUGVyc29uYWwgRGV0YWlscwpPVFJTIEFHIHByb3RlY3RzIHlvdXIgcGVyc29uYWwgZGF0YSBmcm9tIHVuYXV0aG9yaXplZCBhY2Nlc3MsIHVzZSBvciBwdWJsaWNhdGlvbi4gT1RSUyBBRyBlbnN1cmVzIHRoYXQgdGhlIHBlcnNvbmFsIGluZm9ybWF0aW9uIHlvdSBzdG9yZSBvbiB0aGUgc2VydmVyIGlzIHByb3RlY3RlZCBmcm9tIHVuYXV0aG9yaXplZCBhY2Nlc3MgYW5kIHB1YmxpY2F0aW9uLgoKRGlzY2xvc3VyZSBvZiBEZXRhaWxzCk9UUlMgQUcgd2lsbCBub3QgcGFzcyBvbiB5b3VyIGRldGFpbHMgdG8gdGhpcmQgcGFydGllcyB1bmxlc3MgcmVxdWlyZWQgZm9yIGJ1c2luZXNzIHRyYW5zYWN0aW9ucy4KT1RSUyBBRyB3aWxsIG9ubHkgcGFzcyBvbiB5b3VyIGRldGFpbHMgdG8gZW50aXRsZWQgcHVibGljIGluc3RpdHV0aW9ucyBhbmQgYXV0aG9yaXRpZXMgaWYgcmVxdWlyZWQgYnkgbGF3IG9yIGNvdXJ0IG9yZGVyLgoKQW1lbmRtZW50IG9mIERhdGEgUHJvdGVjdGlvbiBQb2xpY3kKT1RSUyBBRyByZXNlcnZlcyB0aGUgcmlnaHQgdG8gYW1lbmQgdGhpcyBzZWN1cml0eSBhbmQgZGF0YSBwcm90ZWN0aW9uIHBvbGljeSBpZiByZXF1aXJlZCBieSB0ZWNobmljYWwgZGV2ZWxvcG1lbnRzLiBJbiB0aGlzIGNhc2Ugd2Ugd2lsbCBhbHNvIGFkYXB0IG91ciBpbmZvcm1hdGlvbiByZWdhcmRpbmcgZGF0YSBwcm90ZWN0aW9uIGFjY29yZGluZ2x5LiBQbGVhc2UgcmVndWxhcmx5IHJlZmVyIHRvIHRoZSBsYXRlc3QgdmVyc2lvbiBvZiBvdXIgRGF0YSBQcm90ZWN0aW9uIFBvbGljeS4KClJpZ2h0IHRvIEluZm9ybWF0aW9uCllvdSBoYXZlIHRoZSByaWdodCB0byBkZW1hbmQgaW5mb3JtYXRpb24gY29uY2VybmluZyB0aGUgZGF0YSBzYXZlZCBhYm91dCB5b3UsIGl0cyBvcmlnaW4gYW5kIHJlY2lwaWVudHMsIGFzIHdlbGwgYXMgdGhlIHB1cnBvc2Ugb2YgdGhlIGRhdGEgcHJvY2Vzc2luZyBhdCBhbnkgdGltZS4gWW91IGNhbiByZXF1ZXN0IGluZm9ybWF0aW9uIGFib3V0IHRoZSBzYXZlZCBkYXRhIGJ5IHNlbmRpbmcgYW4gZS1tYWlsIHRvIGluZm9Ab3Rycy5jb20uCgpGdXJ0aGVyIEluZm9ybWF0aW9uCllvdXIgdHJ1c3QgaXMgdmVyeSBpbXBvcnRhbnQgdG8gdXMuIFdlIGFyZSB3aWxsaW5nIHRvIGluZm9ybSB5b3UgYWJvdXQgdGhlIHByb2Nlc3Npbmcgb2YgeW91ciBwZXJzb25hbCBkZXRhaWxzIGF0IGFueSB0aW1lLiBJZiB5b3UgaGF2ZSBhbnkgcXVlc3Rpb25zIHRoYXQgaGF2ZSBub3QgYmVlbiBhbnN3ZXJlZCBieSB0aGlzIERhdGEgUHJvdGVjdGlvbiBQb2xpY3kgb3IgaWYgeW91IHJlcXVpcmUgbW9yZSBkZXRhaWxlZCBpbmZvcm1hdGlvbiBhYm91dCBhIHNwZWNpZmljIHRvcGljLCBwbGVhc2UgY29udGFjdCBpbmZvQG90cnMuY29tLgoKICAgICAgICAgICAgICAgIDwvdGV4dGFyZWE+CjwhLS0gZHRsOmJsb2NrOkNvbmZpZGVudGlhbENvbnRlbnRFTiAtLT4K</File>
        <File Location="Kernel/System/Support.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/Database.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vU3VwcG9ydC9EYXRhYmFzZS5wbSAtIGFsbCByZXF1aXJlZCBzeXN0ZW0gaW5mb3JtYXRpb24KIyBDb3B5cmlnaHQgKEMpIDIwMDEtMjAxMCBPVFJTIEFHLCBodHRwOi8vb3Rycy5vcmcvCiMgLS0KIyAkSWQ6IERhdGFiYXNlLnBtLHYgMS4xMiAyMDEwLzAyLzA5IDE5OjU0OjE3IHViIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpTdXBwb3J0OjpEYXRhYmFzZTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSB2YXJzIHF3KEBJU0EgJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS4xMiAkKSBbMV07Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpTeXN0ZW06OlN1cHBvcnQ6OkRhdGFiYXNlIC0gZ2xvYmFsIHN5c3RlbSBpbmZvcm1hdGlvbgoKPWhlYWQxIFNZTk9QU0lTCgpBbGwgcmVxdWlyZWQgc3lzdGVtIGluZm9ybWF0aW9uIHRvIGEgcnVubmluZyBPVFJTIGhvc3QuCgo9aGVhZDEgUFVCTElDIElOVEVSRkFDRQoKPW92ZXIgNAoKPWN1dAoKPWl0ZW0gbmV3KCkKCmNyZWF0ZSBEYXRhYmFzZSBpbmZvIG9iamVjdAoKICAgIHVzZSBLZXJuZWw6OkNvbmZpZzsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6RW5jb2RlOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpMb2c7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06Ok1haW47CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OkRCOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpTdXBwb3J0OjpEYXRhYmFzZTsKCiAgICBteSAkQ29uZmlnT2JqZWN0ID0gS2VybmVsOjpDb25maWctPm5ldygpOwogICAgbXkgJEVuY29kZU9iamVjdCA9IEtlcm5lbDo6U3lzdGVtOjpFbmNvZGUtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICk7CiAgICBteSAkTG9nT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkxvZy0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgKTsKICAgIG15ICRNYWluT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06Ok1haW4tPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICk7CiAgICBteSAkREJPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6REItPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBNYWluT2JqZWN0ICAgPT4gJE1haW5PYmplY3QsCiAgICApOwogICAgbXkgJFN5c3RlbUluZm9PYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6U3VwcG9ydDo6RGF0YWJhc2UtPm5ldygKICAgICAgICBDb25maWdPYmplY3QgPT4gJENvbmZpZ09iamVjdCwKICAgICAgICBMb2dPYmplY3QgICAgPT4gJExvZ09iamVjdCwKICAgICAgICBFbmNvZGVPYmplY3QgPT4gJEVuY29kZU9iamVjdCwKICAgICAgICBEQk9iamVjdCAgICAgPT4gJERCT2JqZWN0LAogICAgICAgIE1haW5PYmplY3QgICA9PiAkTWFpbk9iamVjdCwKICAgICk7Cgo9Y3V0CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICMgY2hlY2sgbmVlZGVkIG9iamVjdHMKICAgIGZvciAocXcoQ29uZmlnT2JqZWN0IExvZ09iamVjdCBNYWluT2JqZWN0IERCT2JqZWN0IEVuY29kZU9iamVjdCkpIHsKICAgICAgICAkU2VsZi0+eyRffSA9ICRQYXJhbXskX30gfHwgZGllICJHb3Qgbm8gJF8hIjsKICAgIH0KCiAgICByZXR1cm4gJFNlbGY7Cn0KCj1pdGVtIEFkbWluQ2hlY2tzR2V0KCkKCnJldHVybnMgYSBhcnJheSByZWZlcmVuY2Ugd2l0aCBBZG1pbkNoZWNrcyBpbmZvcm1hdGlvbi4KCiREYXRhYmFzZUFycmF5ID0+IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgTmFtZSA9PiAnUGxhdHRmb3JtJywKICAgICAgICAgICAgICAgIENvbW1lbnQgPT4gJ0xpbnV4JywKICAgICAgICAgICAgICAgIERlc2NyaXB0aW9uID0+ICdQbGVhc2UgYWRkIG1vcmUgbWVtb3J5LicsCiAgICAgICAgICAgICAgICBDaGVjayA9PiAnT0snLAogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBOYW1lID0+ICdWZXJzaW9uJywKICAgICAgICAgICAgICAgIENvbW1lbnQgPT4gJ29wZW5TVVNFIDEwLjInLAogICAgICAgICAgICAgICAgRGVzY3JpcHRpb24gPT4gJ1BsZWFzZSBhZGQgbW9yZSBtZW1vcnkuJywKICAgICAgICAgICAgICAgIENoZWNrID0+ICdPSycsCiAgICAgICAgICAgIH0sCiAgICAgICAgXTsKCj1jdXQKCnN1YiBBZG1pbkNoZWNrc0dldCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICREYXRhQXJyYXkgPSBbXTsKCiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAjCiAgICAjIEdldCBpbmZvcm1hdGlvbiBhYm91dCBhbGwgZGF0YWJhc2VzCiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAjCgogICAgIyBwbGVhc2UgYWRkIGZvciBlYWNoIG5ldyBjaGVjayBhIHBhcnQgbGlrZSB0aGlzCiAgICAjICAgIG15ICRPbmVDaGVjayA9ICRTZWxmLT5DaGVjaygpOwogICAgIyAgICBwdXNoIChAeyREYXRhQXJyYXl9LCAkT25lQ2hlY2spOwoKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICMKICAgICMgR2V0IGluZm9ybWF0aW9uIGFib3V0IHVzZWQgZGF0YWJhc2UKICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICMKCiAgICAjIHRyeSB0byBmaW5kIG91dCB3aGljaCB0aWNrZXQgZGF0YWJhc2UgaXMgY29uZmlndXJlZAogICAgbXkgJERhdGFiYXNlVHlwZSA9ICRTZWxmLT57REJPYmplY3R9LT57J0RCOjpUeXBlJ307CgogICAgIyB0cnkgdG8gZ2V0IGF2YWlsYWJsZSBtb2R1bGVzIGFuZCB0aGUgZGlyZWN0b3J5IG5hbWUKICAgIG15ICREaXJOYW1lID0gJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoJ0hvbWUnKSAuICIvS2VybmVsL1N5c3RlbS9TdXBwb3J0L0RhdGFiYXNlIjsKCiAgICAjIHJlYWQgYWxsIGF2YWlsYWJsZSBtb2R1bGVzIGluIEBMaXN0CiAgICBteSBATGlzdCA9IGdsb2IoICREaXJOYW1lIC4gIi8qLnBtIiApOwogICAgZm9yIG15ICRGaWxlIChATGlzdCkgewoKICAgICAgICAjIHJlbW92ZSAucG0KICAgICAgICAkRmlsZSA9fiBzL14uKlwvKC4rPylcLnBtJC8kMS87CiAgICAgICAgaWYgKCAkRGF0YWJhc2VUeXBlID1+IC9PREJDL2kgKSB7CiAgICAgICAgICAgICREYXRhYmFzZVR5cGUgPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgnRGF0YWJhc2U6OlR5cGUnKTsKICAgICAgICB9CiAgICAgICAgaWYgKCAkRGF0YWJhc2VUeXBlID1+IC9eJEZpbGUvaSApIHsKICAgICAgICAgICAgbXkgJEdlbmVyaWNNb2R1bGUgPSAiS2VybmVsOjpTeXN0ZW06OlN1cHBvcnQ6OkRhdGFiYXNlOjokRmlsZSI7CgogICAgICAgICAgICAjIGxvYWQgbW9kdWxlICRHZW5lcmljTW9kdWxlIGFuZCBjaGVjayBpZiBsb2FkYWJsZQogICAgICAgICAgICBpZiAoICRTZWxmLT57TWFpbk9iamVjdH0tPlJlcXVpcmUoJEdlbmVyaWNNb2R1bGUpICkgewoKICAgICAgICAgICAgICAgICMgY3JlYXRlIG5ldyBvYmplY3QKICAgICAgICAgICAgICAgIG15ICRTdXBwb3J0T2JqZWN0ID0gJEdlbmVyaWNNb2R1bGUtPm5ldyggJXskU2VsZn0gKTsKICAgICAgICAgICAgICAgIGlmICgkU3VwcG9ydE9iamVjdCkgewogICAgICAgICAgICAgICAgICAgIG15ICRBcnJheVJlZiA9ICRTdXBwb3J0T2JqZWN0LT5BZG1pbkNoZWNrc0dldCgpOwogICAgICAgICAgICAgICAgICAgIGlmICggJEFycmF5UmVmICYmIHJlZigkQXJyYXlSZWYpIGVxICdBUlJBWScgKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHB1c2goIEB7JERhdGFBcnJheX0sIEB7JEFycmF5UmVmfSApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICB9CgogICAgcmV0dXJuICREYXRhQXJyYXk7Cn0KCjE7Cgo9YmFjawoKPWhlYWQxIFRFUk1TIEFORCBDT05ESVRJT05TCgpUaGlzIHNvZnR3YXJlIGlzIHBhcnQgb2YgdGhlIE9UUlMgcHJvamVjdCAoaHR0cDovL290cnMub3JnLykuCgpUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQp0aGUgZW5jbG9zZWQgZmlsZSBDT1BZSU5HIGZvciBsaWNlbnNlIGluZm9ybWF0aW9uIChBR1BMKS4gSWYgeW91CmRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCgo9Y3V0Cgo9aGVhZDEgVkVSU0lPTgoKJFJldmlzaW9uOiAxLjEyICQgJERhdGU6IDIwMTAvMDIvMDkgMTk6NTQ6MTcgJAoKPWN1dAo=</File>
        <File Location="Kernel/System/Support/OS.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/OTRS.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/Webserver/IIS.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vU3VwcG9ydC9XZWJzZXJ2ZXIvSUlTLnBtIC0gYWxsIHJlcXVpcmVkIHN5c3RlbSBpbmZvcm1hdGlvbgojIENvcHlyaWdodCAoQykgMjAwMS0yMDEwIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLm9yZy8KIyAtLQojICRJZDogSUlTLnBtLHYgMS45IDIwMTAvMDIvMDkgMjE6Mjk6MTYgdWIgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OlN1cHBvcnQ6OldlYnNlcnZlcjo6SUlTOwoKdXNlIHN0cmljdDsKdXNlIHdhcm5pbmdzOwoKdXNlIHZhcnMgcXcoQElTQSAkVkVSU0lPTik7CiRWRVJTSU9OID0gcXcoJFJldmlzaW9uOiAxLjkgJCkgWzFdOwoKc3ViIG5ldyB7CiAgICBteSAoICRUeXBlLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgYWxsb2NhdGUgbmV3IGhhc2ggZm9yIG9iamVjdAogICAgbXkgJFNlbGYgPSB7fTsKICAgIGJsZXNzKCAkU2VsZiwgJFR5cGUgKTsKCiAgICAjIGNoZWNrIG5lZWRlZCBvYmplY3RzCiAgICBmb3IgKHF3KENvbmZpZ09iamVjdCBMb2dPYmplY3QpKSB7CiAgICAgICAgJFNlbGYtPnskX30gPSAkUGFyYW17JF99IHx8IGRpZSAiR290IG5vICRfISI7CiAgICB9CgogICAgcmV0dXJuICRTZWxmOwp9CgpzdWIgQWRtaW5DaGVja3NHZXQgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICAjIGdldCBuYW1lcyBvZiBhdmFpbGFibGUgY2hlY2tzIGZyb20gc3lzY29uZmlnCiAgICBteSAkQ2hlY2tzID0gJFNlbGYtPntDb25maWdPYmplY3R9LT5HZXQoJ1N1cHBvcnQ6OldlYnNlcnZlcjo6SUlTJyk7CgogICAgIyBmaW5kIG91dCB3aGljaCBjaGVja3Mgc2hvdWxkIGFyZSBlbmFibGVkIGluIHN5c2NvbmZpZwogICAgbXkgQEVuYWJsZWRDaGVja0Z1bmN0aW9uczsKICAgIGlmICggJENoZWNrcyAmJiByZWYgJENoZWNrcyBlcSAnSEFTSCcgKSB7CgogICAgICAgICMgZ2V0IGFsbCBlbmFibGVkIGNoZWNrIGZ1bmN0aW9uIG5hbWVzCiAgICAgICAgQEVuYWJsZWRDaGVja0Z1bmN0aW9ucyA9IHNvcnQgZ3JlcCB7ICRDaGVja3MtPnskX30gfSBrZXlzICV7JENoZWNrc307CiAgICB9CgogICAgIyB0byBzdG9yZSB0aGUgcmVzdWx0CiAgICBteSBARGF0YUFycmF5OwoKICAgIEZVTkNUSU9OTkFNRToKICAgIGZvciBteSAkRnVuY3Rpb25OYW1lIChARW5hYmxlZENoZWNrRnVuY3Rpb25zKSB7CgogICAgICAgICMgcHJlcGVuZCBhbiB1bmRlcnNjb3JlCiAgICAgICAgJEZ1bmN0aW9uTmFtZSA9ICdfJyAuICRGdW5jdGlvbk5hbWU7CgogICAgICAgICMgcnVuIGZ1bmN0aW9uIGFuZCBnZXQgY2hlY2sgZGF0YQogICAgICAgIG15ICRDaGVjayA9ICRTZWxmLT4kRnVuY3Rpb25OYW1lKCk7CgogICAgICAgIG5leHQgRlVOQ1RJT05OQU1FIGlmICEkQ2hlY2s7CgogICAgICAgICMgYXR0YWNoIGNoZWNrIGRhdGEgaWYgdmFsaWQKICAgICAgICBwdXNoIEBEYXRhQXJyYXksICRDaGVjazsKICAgIH0KCiAgICByZXR1cm4gXEBEYXRhQXJyYXk7Cn0KCnN1YiBfUGVybEV4Q2hlY2sgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkRGF0YSA9IHt9OwoKICAgICMgY2hlY2sgaWYgQXBhY2hlOjpEQkkgaXMgbG9hZGVkCiAgICBteSAkQ2hlY2sgICA9ICcnOwogICAgbXkgJE1lc3NhZ2UgPSAnJzsKICAgIGlmICggJEVOVnsnR0FURVdBWV9JTlRFUkZBQ0UnfSAmJiAkRU5WeydHQVRFV0FZX0lOVEVSRkFDRSd9ID1+IC9eQ0dJLVBlcmxFeC9pICkgewogICAgICAgICRDaGVjayAgID0gJ09LJzsKICAgICAgICAkTWVzc2FnZSA9ICJQZXJsRXggaXMgaW4gdXNlICgkRU5WeydHQVRFV0FZX0lOVEVSRkFDRSd9KS4iOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgJENoZWNrICAgPSAnRmFpbGVkJzsKICAgICAgICAkTWVzc2FnZSA9ICdZb3Ugc2hvdWxkIHVzZSBQZXJsRXggdG8gaW5jcmVhc2UgeW91ciBwZXJmb3JtYW5jZS4nOwogICAgfQogICAgJERhdGEgPSB7CiAgICAgICAgTmFtZSAgICAgICAgPT4gJ1BlcmxFeCcsCiAgICAgICAgRGVzY3JpcHRpb24gPT4gJ0NoZWNrIGlmIFBlcmxFeCBpcyB1c2VkLicsCiAgICAgICAgQ29tbWVudCAgICAgPT4gJE1lc3NhZ2UsCiAgICAgICAgQ2hlY2sgICAgICAgPT4gJENoZWNrLAogICAgfTsKICAgIHJldHVybiAkRGF0YTsKfQoKMTsK</File>
        <File Location="Kernel/System/Support/Webserver/Apache.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vU3VwcG9ydC9XZWJzZXJ2ZXIvQXBhY2hlLnBtIC0gYWxsIHJlcXVpcmVkIHN5c3RlbSBpbmZvcm1hdGlvbgojIENvcHlyaWdodCAoQykgMjAwMS0yMDEwIE9UUlMgQUcsIGh0dHA6Ly9vdHJzLm9yZy8KIyAtLQojICRJZDogQXBhY2hlLnBtLHYgMS4xNCAyMDEwLzAyLzA5IDIxOjI5OjE2IHViIEV4cCAkCiMgLS0KIyBUaGlzIHNvZnR3YXJlIGNvbWVzIHdpdGggQUJTT0xVVEVMWSBOTyBXQVJSQU5UWS4gRm9yIGRldGFpbHMsIHNlZQojIHRoZSBlbmNsb3NlZCBmaWxlIENPUFlJTkcgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24gKEFHUEwpLiBJZiB5b3UKIyBkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgojIC0tCgpwYWNrYWdlIEtlcm5lbDo6U3lzdGVtOjpTdXBwb3J0OjpXZWJzZXJ2ZXI6OkFwYWNoZTsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSB2YXJzIHF3KEBJU0EgJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS4xNCAkKSBbMV07CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICMgY2hlY2sgbmVlZGVkIG9iamVjdHMKICAgIGZvciAocXcoQ29uZmlnT2JqZWN0IExvZ09iamVjdCkpIHsKICAgICAgICAkU2VsZi0+eyRffSA9ICRQYXJhbXskX30gfHwgZGllICJHb3Qgbm8gJF8hIjsKICAgIH0KCiAgICByZXR1cm4gJFNlbGY7Cn0KCnN1YiBBZG1pbkNoZWNrc0dldCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgICMgZ2V0IG5hbWVzIG9mIGF2YWlsYWJsZSBjaGVja3MgZnJvbSBzeXNjb25maWcKICAgIG15ICRDaGVja3MgPSAkU2VsZi0+e0NvbmZpZ09iamVjdH0tPkdldCgnU3VwcG9ydDo6V2Vic2VydmVyOjpBcGFjaGUnKTsKCiAgICAjIGZpbmQgb3V0IHdoaWNoIGNoZWNrcyBzaG91bGQgYXJlIGVuYWJsZWQgaW4gc3lzY29uZmlnCiAgICBteSBARW5hYmxlZENoZWNrRnVuY3Rpb25zOwogICAgaWYgKCAkQ2hlY2tzICYmIHJlZiAkQ2hlY2tzIGVxICdIQVNIJyApIHsKCiAgICAgICAgIyBnZXQgYWxsIGVuYWJsZWQgY2hlY2sgZnVuY3Rpb24gbmFtZXMKICAgICAgICBARW5hYmxlZENoZWNrRnVuY3Rpb25zID0gc29ydCBncmVwIHsgJENoZWNrcy0+eyRffSB9IGtleXMgJXskQ2hlY2tzfTsKICAgIH0KCiAgICAjIHRvIHN0b3JlIHRoZSByZXN1bHQKICAgIG15IEBEYXRhQXJyYXk7CgogICAgRlVOQ1RJT05OQU1FOgogICAgZm9yIG15ICRGdW5jdGlvbk5hbWUgKEBFbmFibGVkQ2hlY2tGdW5jdGlvbnMpIHsKCiAgICAgICAgIyBwcmVwZW5kIGFuIHVuZGVyc2NvcmUKICAgICAgICAkRnVuY3Rpb25OYW1lID0gJ18nIC4gJEZ1bmN0aW9uTmFtZTsKCiAgICAgICAgIyBydW4gZnVuY3Rpb24gYW5kIGdldCBjaGVjayBkYXRhCiAgICAgICAgbXkgJENoZWNrID0gJFNlbGYtPiRGdW5jdGlvbk5hbWUoKTsKCiAgICAgICAgbmV4dCBGVU5DVElPTk5BTUUgaWYgISRDaGVjazsKCiAgICAgICAgIyBhdHRhY2ggY2hlY2sgZGF0YSBpZiB2YWxpZAogICAgICAgIHB1c2ggQERhdGFBcnJheSwgJENoZWNrOwogICAgfQoKICAgIHJldHVybiBcQERhdGFBcnJheTsKfQoKc3ViIF9BcGFjaGVWZXJzaW9uQ2hlY2sgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkRGF0YSAgICA9IHt9OwogICAgbXkgJENoZWNrICAgPSAnJzsKICAgIG15ICRNZXNzYWdlID0gJyc7CiAgICBpZiAoICRFTlZ7U0VSVkVSX1NPRlRXQVJFfSApIHsKICAgICAgICAkQ2hlY2sgICA9ICdPSyc7CiAgICAgICAgJE1lc3NhZ2UgPSAiWW91IGFyZSBydW5uaW5nICRFTlZ7U0VSVkVSX1NPRlRXQVJFfS4iOwogICAgfQogICAgZWxzZSB7CiAgICAgICAgJENoZWNrICAgPSAnRmFpbGVkJzsKICAgICAgICAkTWVzc2FnZSA9ICdDb3VsZCBub3QgZGV0ZXJtaW5lIEFwYWNoZSB2ZXJzaW9uLic7CiAgICB9CiAgICAkRGF0YSA9IHsKICAgICAgICBOYW1lICAgICAgICA9PiAnQXBhY2hlIFZlcnNpb24nLAogICAgICAgIERlc2NyaXB0aW9uID0+ICdEaXNwbGF5IHdlYiBzZXJ2ZXIgdmVyc2lvbi4nLAogICAgICAgIENvbW1lbnQgICAgID0+ICRNZXNzYWdlLAogICAgICAgIENoZWNrICAgICAgID0+ICRDaGVjaywKICAgIH07CiAgICByZXR1cm4gJERhdGE7Cn0KCnN1YiBfQXBhY2hlREJJQ2hlY2sgewogICAgbXkgKCAkU2VsZiwgJVBhcmFtICkgPSBAXzsKCiAgICBteSAkRGF0YSA9IHt9OwoKICAgICMgY2hlY2sgaWYgQXBhY2hlOjpEQkkgaXMgbG9hZGVkCiAgICBteSAkQXBhY2hlREJJID0gMDsKICAgIG15ICRDaGVjayAgICAgPSAnJzsKICAgIG15ICRNZXNzYWdlICAgPSAnJzsKICAgIGlmICggJEVOVntNT0RfUEVSTH0gKSB7CiAgICAgICAgZm9yIG15ICRNb2R1bGUgKCBrZXlzICVJTkMgKSB7CiAgICAgICAgICAgICRNb2R1bGUgPX4gcy9cLy86Oi9nOwogICAgICAgICAgICAkTW9kdWxlID1+IHMvXC5wbSQvL2c7CiAgICAgICAgICAgIGlmICggJE1vZHVsZSBlcSAnQXBhY2hlOjpEQkknIHx8ICRNb2R1bGUgZXEgJ0FwYWNoZTI6OkRCSScgKSB7CiAgICAgICAgICAgICAgICAkQXBhY2hlREJJID0gJE1vZHVsZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBpZiAoICEkQXBhY2hlREJJICkgewogICAgICAgICAgICAkQ2hlY2sgPSAnQ3JpdGljYWwnOwogICAgICAgICAgICAkTWVzc2FnZQogICAgICAgICAgICAgICAgPSAnQXBhY2hlOjpEQkkgc2hvdWxkIGJlIHVzZWQgdG8gZ2V0IGEgYmV0dGVyIHBlcmZvcm1hbmNlIChwcmUtZXN0YWJsaXNoIGRhdGFiYXNlIGNvbm5lY3Rpb25zKS4nOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgJENoZWNrICAgPSAnT0snOwogICAgICAgICAgICAkTWVzc2FnZSA9ICRBcGFjaGVEQkk7CiAgICAgICAgfQogICAgfQogICAgZWxzZSB7CgogICAgICAgICMgSnVzdCBza2lwIHRoaXMgdGVzdCBpZiB3ZScgcmUgbm90IHJ1bm5pbmcgbW9kX3BlcmwuCiAgICAgICAgcmV0dXJuOwogICAgfQogICAgJERhdGEgPSB7CiAgICAgICAgTmFtZSAgICAgICAgPT4gJ0FwYWNoZTo6REJJJywKICAgICAgICBEZXNjcmlwdGlvbiA9PiAnQ2hlY2sgaWYgdGhlIHN5c3RlbSB1c2VzIEFwYWNoZTo6REJJLicsCiAgICAgICAgQ29tbWVudCAgICAgPT4gJE1lc3NhZ2UsCiAgICAgICAgQ2hlY2sgICAgICAgPT4gJENoZWNrLAogICAgfTsKICAgIHJldHVybiAkRGF0YTsKfQoKc3ViIF9BcGFjaGVSZWxvYWRDaGVjayB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICREYXRhID0ge307CgogICAgIyByZWxvYWQgY2hlY2sKICAgIG15ICRDaGVjayAgID0gJ0ZhaWxlZCc7CiAgICBteSAkTWVzc2FnZSA9ICcnOwogICAgaWYgKCAkRU5We01PRF9QRVJMfSApIHsKICAgICAgICBldmFsICJyZXF1aXJlIG1vZF9wZXJsIjsKICAgICAgICBpZiAoIGRlZmluZWQgJG1vZF9wZXJsOjpWRVJTSU9OICkgewogICAgICAgICAgICBpZiAoICRtb2RfcGVybDo6VkVSU0lPTiA+PSAxLjk5ICkgewoKICAgICAgICAgICAgICAgICMgY2hlY2sgaWYgQXBhY2hlOjpSZWxvYWQgaXMgbG9hZGVkCiAgICAgICAgICAgICAgICBteSAkQXBhY2hlUmVsb2FkID0gMDsKICAgICAgICAgICAgICAgIGZvciBteSAkTW9kdWxlICgga2V5cyAlSU5DICkgewogICAgICAgICAgICAgICAgICAgICRNb2R1bGUgPX4gcy9cLy86Oi9nOwogICAgICAgICAgICAgICAgICAgICRNb2R1bGUgPX4gcy9cLnBtJC8vZzsKICAgICAgICAgICAgICAgICAgICBpZiAoICRNb2R1bGUgZXEgJ0FwYWNoZTo6UmVsb2FkJyB8fCAkTW9kdWxlIGVxICdBcGFjaGUyOjpSZWxvYWQnICkgewogICAgICAgICAgICAgICAgICAgICAgICAkQXBhY2hlUmVsb2FkID0gJE1vZHVsZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoICEkQXBhY2hlUmVsb2FkICkgewogICAgICAgICAgICAgICAgICAgICRDaGVjayA9ICdJbmZvJzsKICAgICAgICAgICAgICAgICAgICAkTWVzc2FnZQogICAgICAgICAgICAgICAgICAgICAgICA9ICdBcGFjaGU6OlJlbG9hZCBvciBBcGFjaGUyOjpSZWxvYWQgc2hvdWxkIGJlIHVzZWQgYXMgUGVybE1vZHVsZSBhbmQgUGVybEluaXRIYW5kbGVyIHRvIHByZXZlbnQgd2ViIHNlcnZlciByZXN0YXJ0cyB3aGVuIGluc3RhbGxpbmcgYW5kIHVwZ3JhZGluZyBtb2R1bGVzLic7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkQ2hlY2sgICA9ICdPSyc7CiAgICAgICAgICAgICAgICAgICAgJE1lc3NhZ2UgPSAkQXBhY2hlUmVsb2FkOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQogICAgZWxzZSB7CgogICAgICAgICMgSnVzdCBza2lwIHRoaXMgdGVzdCBpZiB3ZScgcmUgbm90IHJ1bm5pbmcgbW9kX3BlcmwuCiAgICAgICAgcmV0dXJuOwogICAgfQogICAgJERhdGEgPSB7CiAgICAgICAgTmFtZSAgICAgICAgPT4gJ0FwYWNoZTo6UmVsb2FkJywKICAgICAgICBEZXNjcmlwdGlvbiA9PiAnQ2hlY2sgaWYgdGhlIHN5c3RlbSB1c2VzIEFwYWNoZTo6UmVsb2FkL0FwYWNoZTI6OlJlbG9hZC4nLAogICAgICAgIENvbW1lbnQgICAgID0+ICRNZXNzYWdlLAogICAgICAgIENoZWNrICAgICAgID0+ICRDaGVjaywKICAgIH07CiAgICByZXR1cm4gJERhdGE7Cn0KCnN1YiBfQ0dJQWNjZWxlcmF0b3JDaGVjayB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICREYXRhID0ge307CgogICAgbXkgJENoZWNrICAgPSAnRmFpbGVkJzsKICAgIG15ICRNZXNzYWdlID0gJyc7CiAgICBpZiAoICRFTlZ7TU9EX1BFUkx9ICkgewoKICAgICAgICAjIGNoZWNrIG1vZF9wZXJsIHZlcnNpb24KICAgICAgICBpZiAoICRFTlZ7TU9EX1BFUkx9ID1+IC9cLzEuOTkvICkgewogICAgICAgICAgICAkQ2hlY2sgPSAnQ3JpdGljYWwnOwogICAgICAgICAgICAkTWVzc2FnZQogICAgICAgICAgICAgICAgPSAiWW91IHVzZSBhIGJldGEgdmVyc2lvbiBvZiBtb2RfcGVybCAoJEVOVntNT0RfUEVSTH0pLCB5b3Ugc2hvdWxkIHVwZ3JhZGUgdG8gYSBzdGFibGUgdmVyc2lvbi4iOwogICAgICAgIH0KICAgICAgICBlbHNpZiAoICRFTlZ7TU9EX1BFUkx9ID1+IC9cLzEvICkgewogICAgICAgICAgICAkQ2hlY2sgICA9ICdDcml0aWNhbCc7CiAgICAgICAgICAgICRNZXNzYWdlID0gIllvdSBzaG91bGQgdXBkYXRlIG1vZF9wZXJsIHRvIDIueCAoJEVOVntNT0RfUEVSTH0pLiI7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICAkQ2hlY2sgICA9ICdPSyc7CiAgICAgICAgICAgICRNZXNzYWdlID0gJEVOVntNT0RfUEVSTH07CiAgICAgICAgfQogICAgfQogICAgZWxzaWYgKCAkRU5We1NFUlZFUl9TT0ZUV0FSRX0gPX4gL2Zhc3RjZ2kvaSApIHsKICAgICAgICAkQ2hlY2sgICA9ICdPSyc7CiAgICAgICAgJE1lc3NhZ2UgPSAnWW91IGFyZSB1c2luZyBGYXN0Q0dJLic7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkQ2hlY2sgICA9ICdDcml0aWNhbCc7CiAgICAgICAgJE1lc3NhZ2UgPSAnWW91IHNob3VsZCB1c2UgRmFzdENHSSBvciBtb2RfcGVybCB0byBpbmNyZWFzZSB5b3VyIHBlcmZvcm1hbmNlLic7CiAgICB9CiAgICAkRGF0YSA9IHsKICAgICAgICBOYW1lICAgICAgICA9PiAnQ0dJIEFjY2VsZXJhdG9yJywKICAgICAgICBEZXNjcmlwdGlvbiA9PiAnQ2hlY2sgZm9yIENHSSBBY2NlbGVyYXRvci4nLAogICAgICAgIENvbW1lbnQgICAgID0+ICRNZXNzYWdlLAogICAgICAgIENoZWNrICAgICAgID0+ICRDaGVjaywKICAgIH07CiAgICByZXR1cm4gJERhdGE7Cn0KCjE7Cg==</File>
        <File Location="Kernel/System/Support/Database/oracle.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/Database/mssql.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/Database/postgresql.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/Database/mysql.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/System/Support/Webserver.pm" Permission="644" Encode="Base64">IyAtLQojIEtlcm5lbC9TeXN0ZW0vU3VwcG9ydC9XZWJzZXJ2ZXIucG0gLSBhbGwgcmVxdWlyZWQgc3lzdGVtIGluZm9ybWF0aW9uCiMgQ29weXJpZ2h0IChDKSAyMDAxLTIwMTAgT1RSUyBBRywgaHR0cDovL290cnMub3JnLwojIC0tCiMgJElkOiBXZWJzZXJ2ZXIucG0sdiAxLjEwIDIwMTAvMDIvMDkgMTk6NTQ6MTcgdWIgRXhwICQKIyAtLQojIFRoaXMgc29mdHdhcmUgY29tZXMgd2l0aCBBQlNPTFVURUxZIE5PIFdBUlJBTlRZLiBGb3IgZGV0YWlscywgc2VlCiMgdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQojIGRpZCBub3QgcmVjZWl2ZSB0aGlzIGZpbGUsIHNlZSBodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQuCiMgLS0KCnBhY2thZ2UgS2VybmVsOjpTeXN0ZW06OlN1cHBvcnQ6OldlYnNlcnZlcjsKCnVzZSBzdHJpY3Q7CnVzZSB3YXJuaW5nczsKCnVzZSB2YXJzIHF3KEBJU0EgJFZFUlNJT04pOwokVkVSU0lPTiA9IHF3KCRSZXZpc2lvbjogMS4xMCAkKSBbMV07Cgo9aGVhZDEgTkFNRQoKS2VybmVsOjpTeXN0ZW06OlN1cHBvcnQ6OldlYnNlcnZlciAtIGdsb2JhbCBzeXN0ZW0gaW5mb3JtYXRpb24KCj1oZWFkMSBTWU5PUFNJUwoKQWxsIHJlcXVpcmVkIHN5c3RlbSBpbmZvcm1hdGlvbiB0byBhIHJ1bm5pbmcgT1RSUyBob3N0LgoKPWhlYWQxIFBVQkxJQyBJTlRFUkZBQ0UKCj1vdmVyIDQKCj1jdXQKCj1pdGVtIG5ldygpCgpjcmVhdGUgV2Vic2VydmVyIGluZm8gb2JqZWN0CgogICAgdXNlIEtlcm5lbDo6Q29uZmlnOwogICAgdXNlIEtlcm5lbDo6U3lzdGVtOjpFbmNvZGU7CiAgICB1c2UgS2VybmVsOjpTeXN0ZW06OkxvZzsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6TWFpbjsKICAgIHVzZSBLZXJuZWw6OlN5c3RlbTo6U3VwcG9ydDo6V2Vic2VydmVyOwoKICAgIG15ICRDb25maWdPYmplY3QgPSBLZXJuZWw6OkNvbmZpZy0+bmV3KCk7CiAgICBteSAkRW5jb2RlT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OkVuY29kZS0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgKTsKICAgIG15ICRMb2dPYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6TG9nLT5uZXcoCiAgICAgICAgQ29uZmlnT2JqZWN0ID0+ICRDb25maWdPYmplY3QsCiAgICAgICAgRW5jb2RlT2JqZWN0ID0+ICRFbmNvZGVPYmplY3QsCiAgICApOwogICAgbXkgJE1haW5PYmplY3QgPSBLZXJuZWw6OlN5c3RlbTo6TWFpbi0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIEVuY29kZU9iamVjdCA9PiAkRW5jb2RlT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgKTsKICAgIG15ICRTeXN0ZW1JbmZvT2JqZWN0ID0gS2VybmVsOjpTeXN0ZW06OlN1cHBvcnQ6OldlYnNlcnZlci0+bmV3KAogICAgICAgIENvbmZpZ09iamVjdCA9PiAkQ29uZmlnT2JqZWN0LAogICAgICAgIExvZ09iamVjdCAgICA9PiAkTG9nT2JqZWN0LAogICAgICAgIE1haW5PYmplY3QgICA9PiAkTWFpbk9iamVjdCwKICAgICk7Cgo9Y3V0CgpzdWIgbmV3IHsKICAgIG15ICggJFR5cGUsICVQYXJhbSApID0gQF87CgogICAgIyBhbGxvY2F0ZSBuZXcgaGFzaCBmb3Igb2JqZWN0CiAgICBteSAkU2VsZiA9IHt9OwogICAgYmxlc3MoICRTZWxmLCAkVHlwZSApOwoKICAgICMgY2hlY2sgbmVlZGVkIG9iamVjdHMKICAgIGZvciAocXcoQ29uZmlnT2JqZWN0IExvZ09iamVjdCBNYWluT2JqZWN0KSkgewogICAgICAgICRTZWxmLT57JF99ID0gJFBhcmFteyRffSB8fCBkaWUgIkdvdCBubyAkXyEiOwogICAgfQoKICAgIHJldHVybiAkU2VsZjsKfQoKPWl0ZW0gQWRtaW5DaGVja3NHZXQoKQoKcmV0dXJucyBhIGFycmF5IHJlZmVyZW5jZSB3aXRoIEFkbWluQ2hlY2tzIGluZm9ybWF0aW9uLgoKJFdlYnNlcnZlckFycmF5ID0+IFsKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgTmFtZSA9PiAnUGxhdHRmb3JtJywKICAgICAgICAgICAgICAgIENvbW1lbnQgPT4gJ0xpbnV4JywKICAgICAgICAgICAgICAgIERlc2NyaXB0aW9uID0+ICdQbGVhc2UgYWRkIG1vcmUgbWVtb3J5LicsCiAgICAgICAgICAgICAgICBDaGVjayA9PiAnT0snLAogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBOYW1lID0+ICdWZXJzaW9uJywKICAgICAgICAgICAgICAgIENvbW1lbnQgPT4gJ29wZW5TVVNFIDEwLjInLAogICAgICAgICAgICAgICAgRGVzY3JpcHRpb24gPT4gJ1BsZWFzZSBhZGQgbW9yZSBtZW1vcnkuJywKICAgICAgICAgICAgICAgIENoZWNrID0+ICdPSycsCiAgICAgICAgICAgIH0sCiAgICAgICAgXTsKCj1jdXQKCnN1YiBBZG1pbkNoZWNrc0dldCB7CiAgICBteSAoICRTZWxmLCAlUGFyYW0gKSA9IEBfOwoKICAgIG15ICREYXRhQXJyYXkgPSBbXTsKCiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAjCiAgICAjIEdldCBpbmZvcm1hdGlvbiBhYm91dCBhbGwgV2Vic2VydmVycwogICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIwoKICAgICMgcGxlYXNlIGFkZCBmb3IgZWFjaCBuZXcgY2hlY2sgYSBwYXJ0IGxpa2UgdGhpcwogICAgIyAgICBteSAkT25lQ2hlY2sgPSAkU2VsZi0+Q2hlY2soKTsKICAgICMgICAgcHVzaCAoQHskRGF0YUFycmF5fSwgJE9uZUNoZWNrKTsKCiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAjCiAgICAjIEdldCBpbmZvcm1hdGlvbiBhYm91dCB1c2VkIFdlYnNlcnZlcgogICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gIwoKICAgICMgdHJ5IHRvIGZpbmQgb3V0IHdoaWNoIFdlYnNlcnZlciBpcyBjb25maWd1cmVkCiAgICBteSAkV2Vic2VydmVyVHlwZSA9ICcnOwogICAgaWYgKCAkRU5We1NFUlZFUl9TT0ZUV0FSRX0gPX4gL2FwYWNoZS9pICkgewogICAgICAgICRXZWJzZXJ2ZXJUeXBlID0gJ0FwYWNoZSc7CiAgICB9CiAgICBlbHNlIHsKICAgICAgICAkV2Vic2VydmVyVHlwZSA9ICdJSVMnOwogICAgfQoKICAgICMgdHJ5IHRvIGdldCBhdmFpbGFibGUgbW9kdWxlcyBhbmQgdGhlIGRpcmVjdG9yeSBuYW1lCiAgICBteSAkRGlyTmFtZSA9ICRTZWxmLT57Q29uZmlnT2JqZWN0fS0+R2V0KCdIb21lJykgLiAnL0tlcm5lbC9TeXN0ZW0vU3VwcG9ydC9XZWJzZXJ2ZXInOwoKICAgICMgcmVhZCBhbGwgYXZhaWxhYmxlIG1vZHVsZXMgaW4gQExpc3QKICAgIG15IEBMaXN0ID0gZ2xvYiggJERpck5hbWUgLiAnLyoucG0nICk7CiAgICBmb3IgbXkgJEZpbGUgKEBMaXN0KSB7CgogICAgICAgICMgcmVtb3ZlIC5wbQogICAgICAgICRGaWxlID1+IHMvXi4qXC8oLis/KVwucG0kLyQxLzsKICAgICAgICBpZiAoICRXZWJzZXJ2ZXJUeXBlID1+IC9eJEZpbGUvaSApIHsKICAgICAgICAgICAgbXkgJEdlbmVyaWNNb2R1bGUgPSAiS2VybmVsOjpTeXN0ZW06OlN1cHBvcnQ6OldlYnNlcnZlcjo6JEZpbGUiOwoKICAgICAgICAgICAgIyBsb2FkIG1vZHVsZSAkR2VuZXJpY01vZHVsZSBhbmQgY2hlY2sgaWYgbG9hZGFibGUKICAgICAgICAgICAgaWYgKCAkU2VsZi0+e01haW5PYmplY3R9LT5SZXF1aXJlKCRHZW5lcmljTW9kdWxlKSApIHsKCiAgICAgICAgICAgICAgICAjIGNyZWF0ZSBuZXcgb2JqZWN0CiAgICAgICAgICAgICAgICBteSAkU3VwcG9ydE9iamVjdCA9ICRHZW5lcmljTW9kdWxlLT5uZXcoICV7JFNlbGZ9ICk7CiAgICAgICAgICAgICAgICBpZiAoJFN1cHBvcnRPYmplY3QpIHsKICAgICAgICAgICAgICAgICAgICBteSAkQXJyYXlSZWYgPSAkU3VwcG9ydE9iamVjdC0+QWRtaW5DaGVja3NHZXQoKTsKICAgICAgICAgICAgICAgICAgICBpZiAoICRBcnJheVJlZiAmJiByZWYoJEFycmF5UmVmKSBlcSAnQVJSQVknICkgewogICAgICAgICAgICAgICAgICAgICAgICBwdXNoKCBAeyREYXRhQXJyYXl9LCBAeyRBcnJheVJlZn0gKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgfQoKICAgIHJldHVybiAkRGF0YUFycmF5Owp9CgoxOwoKPWJhY2sKCj1oZWFkMSBURVJNUyBBTkQgQ09ORElUSU9OUwoKVGhpcyBzb2Z0d2FyZSBpcyBwYXJ0IG9mIHRoZSBPVFJTIHByb2plY3QgKGh0dHA6Ly9vdHJzLm9yZy8pLgoKVGhpcyBzb2Z0d2FyZSBjb21lcyB3aXRoIEFCU09MVVRFTFkgTk8gV0FSUkFOVFkuIEZvciBkZXRhaWxzLCBzZWUKdGhlIGVuY2xvc2VkIGZpbGUgQ09QWUlORyBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbiAoQUdQTCkuIElmIHlvdQpkaWQgbm90IHJlY2VpdmUgdGhpcyBmaWxlLCBzZWUgaHR0cDovL3d3dy5nbnUub3JnL2xpY2Vuc2VzL2FncGwudHh0LgoKPWN1dAoKPWhlYWQxIFZFUlNJT04KCiRSZXZpc2lvbjogMS4xMCAkICREYXRlOiAyMDEwLzAyLzA5IDE5OjU0OjE3ICQKCj1jdXQK</File>
        <File Location="Kernel/cpan-lib/Archive/Tar/Constant.pm" Permission="644" Encode="Base64">cGFja2FnZSBBcmNoaXZlOjpUYXI6OkNvbnN0YW50OwoKQkVHSU4gewogICAgcmVxdWlyZSBFeHBvcnRlcjsKICAgICRWRVJTSU9OPSAnMC4wMic7CiAgICBASVNBICAgID0gcXdbRXhwb3J0ZXJdOwogICAgQEVYUE9SVCA9IHF3WwogICAgICAgICAgICAgICAgRklMRSBIQVJETElOSyBTWU1MSU5LIENIQVJERVYgQkxPQ0tERVYgRElSIEZJRk8gU09DS0VUIFVOS05PV04KICAgICAgICAgICAgICAgIEJVRkZFUiBIRUFEIFJFQURfT05MWSBXUklURV9PTkxZIFVOUEFDSyBQQUNLIFRJTUVfT0ZGU0VUIFpMSUIKICAgICAgICAgICAgICAgIEJMT0NLX1NJWkUgVEFSX1BBRCBUQVJfRU5EIE9OX1VOSVggQkxPQ0sgQ0FOX1JFQURMSU5LIE1BR0lDIAogICAgICAgICAgICAgICAgVEFSX1ZFUlNJT04gVU5BTUUgR05BTUUgQ0FOX0NIT1dOIE1PREUgQ0hFQ0tfU1VNIFVJRCBHSUQgCiAgICAgICAgICAgICAgICBHWklQX01BR0lDX05VTSBNT0RFX1JFQUQgTE9OR0xJTksgTE9OR0xJTktfTkFNRSBQUkVGSVhfTEVOR1RICiAgICAgICAgICAgICAgICBMQUJFTCBOQU1FX0xFTkdUSCBTVFJJUF9NT0RFCiAgICAgICAgICAgIF07CgogICAgcmVxdWlyZSBUaW1lOjpMb2NhbCBpZiAkXk8gZXEgIk1hY09TIjsKfQoKdXNlIGNvbnN0YW50IEZJTEUgICAgICAgICAgID0+IDA7CnVzZSBjb25zdGFudCBIQVJETElOSyAgICAgICA9PiAxOwp1c2UgY29uc3RhbnQgU1lNTElOSyAgICAgICAgPT4gMjsKdXNlIGNvbnN0YW50IENIQVJERVYgICAgICAgID0+IDM7CnVzZSBjb25zdGFudCBCTE9DS0RFViAgICAgICA9PiA0Owp1c2UgY29uc3RhbnQgRElSICAgICAgICAgICAgPT4gNTsKdXNlIGNvbnN0YW50IEZJRk8gICAgICAgICAgID0+IDY7CnVzZSBjb25zdGFudCBTT0NLRVQgICAgICAgICA9PiA4Owp1c2UgY29uc3RhbnQgVU5LTk9XTiAgICAgICAgPT4gOTsKdXNlIGNvbnN0YW50IExPTkdMSU5LICAgICAgID0+ICdMJzsKdXNlIGNvbnN0YW50IExBQkVMICAgICAgICAgID0+ICdWJzsKCnVzZSBjb25zdGFudCBCVUZGRVIgICAgICAgICA9PiA0MDk2Owp1c2UgY29uc3RhbnQgSEVBRCAgICAgICAgICAgPT4gNTEyOwp1c2UgY29uc3RhbnQgQkxPQ0sgICAgICAgICAgPT4gNTEyOwoKdXNlIGNvbnN0YW50IEJMT0NLX1NJWkUgICAgID0+IHN1YiB7IG15ICRuID0gaW50KCRfWzBdL0JMT0NLKTsgJG4rKyBpZiAkX1swXSAlIEJMT0NLOyAkbiAqIEJMT0NLIH07CnVzZSBjb25zdGFudCBUQVJfUEFEICAgICAgICA9PiBzdWIgeyBteSAkeCA9IHNoaWZ0IHx8IHJldHVybjsgcmV0dXJuICJcMCIgeCAoQkxPQ0sgLSAoJHggJSBCTE9DSykgKSB9Owp1c2UgY29uc3RhbnQgVEFSX0VORCAgICAgICAgPT4gIlwwIiB4IEJMT0NLOwoKdXNlIGNvbnN0YW50IFJFQURfT05MWSAgICAgID0+IHN1YiB7IHNoaWZ0KCkgPyAncmInIDogJ3InIH07CnVzZSBjb25zdGFudCBXUklURV9PTkxZICAgICA9PiBzdWIgeyAkX1swXSA/ICd3YicgLiBzaGlmdCA6ICd3JyB9Owp1c2UgY29uc3RhbnQgTU9ERV9SRUFEICAgICAgPT4gc3ViIHsgJF9bMF0gPX4gL15yLyA/IDEgOiAwIH07CgojIFBvaW50bGVzcyBhc3NpZ25tZW50IHRvIG1ha2UgLXcgc2h1dCB1cApteSAkZ2V0cHd1aWQ7ICRnZXRwd3VpZCA9ICd1bmtub3duJyB1bmxlc3MgZXZhbCB7IG15ICRmID0gZ2V0cHd1aWQgKDApOyB9OwpteSAkZ2V0Z3JnaWQ7ICRnZXRncmdpZCA9ICd1bmtub3duJyB1bmxlc3MgZXZhbCB7IG15ICRmID0gZ2V0Z3JnaWQgKDApOyB9Owp1c2UgY29uc3RhbnQgVU5BTUUgICAgICAgICAgPT4gc3ViIHsgJGdldHB3dWlkIHx8IHNjYWxhciBnZXRwd3VpZCggc2hpZnQoKSApIHx8ICcnIH07CnVzZSBjb25zdGFudCBHTkFNRSAgICAgICAgICA9PiBzdWIgeyAkZ2V0Z3JnaWQgfHwgc2NhbGFyIGdldGdyZ2lkKCBzaGlmdCgpICkgfHwgJycgfTsKdXNlIGNvbnN0YW50IFVJRCAgICAgICAgICAgID0+ICQ+Owp1c2UgY29uc3RhbnQgR0lEICAgICAgICAgICAgPT4gKHNwbGl0ICcgJywgJCkgKVswXTsKCnVzZSBjb25zdGFudCBNT0RFICAgICAgICAgICA9PiBkbyB7IDA2NjYgJiAoMDc3NyAmIH51bWFzaykgfTsKdXNlIGNvbnN0YW50IFNUUklQX01PREUgICAgID0+IHN1YiB7IHNoaWZ0KCkgJiAwNzc3IH07CnVzZSBjb25zdGFudCBDSEVDS19TVU0gICAgICA9PiAiICAgICAgIjsKCnVzZSBjb25zdGFudCBVTlBBQ0sgICAgICAgICA9PiAnQTEwMCBBOCBBOCBBOCBBMTIgQTEyIEE4IEExIEExMDAgQTYgQTIgQTMyIEEzMiBBOCBBOCBBMTU1IHgxMic7CnVzZSBjb25zdGFudCBQQUNLICAgICAgICAgICA9PiAnYTEwMCBhOCBhOCBhOCBhMTIgYTEyIEE4IGExIGExMDAgYTYgYTIgYTMyIGEzMiBhOCBhOCBhMTU1IHgxMic7CnVzZSBjb25zdGFudCBOQU1FX0xFTkdUSCAgICA9PiAxMDA7CnVzZSBjb25zdGFudCBQUkVGSVhfTEVOR1RIICA9PiAxNTU7Cgp1c2UgY29uc3RhbnQgVElNRV9PRkZTRVQgICAgPT4gKCReTyBlcSAiTWFjT1MiKSA/IFRpbWU6OkxvY2FsOjp0aW1lbG9jYWwoMCwwLDAsMSwwLDcwKSA6IDA7ICAgIAp1c2UgY29uc3RhbnQgTUFHSUMgICAgICAgICAgPT4gInVzdGFyIjsKdXNlIGNvbnN0YW50IFRBUl9WRVJTSU9OICAgID0+ICIwMCI7CnVzZSBjb25zdGFudCBMT05HTElOS19OQU1FICA9PiAnLi8uL0BMb25nTGluayc7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyMjIGFsbG93IFpMSUIgdG8gYmUgdHVybmVkIG9mZiB1c2luZyBFTlYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICMjIyBERUJVRyBvbmx5CnVzZSBjb25zdGFudCBaTElCICAgICAgICAgICA9PiBkbyB7ICEkRU5WeydQRVJMNV9BVF9OT19aTElCJ30gYW5kCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmFsIHsgcmVxdWlyZSBJTzo6WmxpYiB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkRU5WeydQRVJMNV9BVF9OT19aTElCJ30gfHwgJEAgPyAwIDogMSB9OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKdXNlIGNvbnN0YW50IEdaSVBfTUFHSUNfTlVNID0+IHFyL14oPzpcMDM3XDIxM3xcMDM3XDIzNSkvOwoKdXNlIGNvbnN0YW50IENBTl9DSE9XTiAgICAgID0+IGRvIHsgKCQ+ID09IDAgYW5kICReTyBuZSAiTWFjT1MiIGFuZCAkXk8gbmUgIk1TV2luMzIiKSB9Owp1c2UgY29uc3RhbnQgQ0FOX1JFQURMSU5LICAgPT4gKCReTyBuZSAnTVNXaW4zMicgYW5kICReTyAhfiAvUklTQyg/OlsgX10pP09TL2kgYW5kICReTyBuZSAnVk1TJyk7CnVzZSBjb25zdGFudCBPTl9VTklYICAgICAgICA9PiAoJF5PIG5lICdNU1dpbjMyJyBhbmQgJF5PIG5lICdNYWNPUycgYW5kICReTyBuZSAnVk1TJyk7CgoxOwo=</File>
        <File Location="Kernel/cpan-lib/Archive/Tar/File.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/cpan-lib/Archive/Tar.pm" Permission="644" Encode="Base64"></File>
        <File Location="Kernel/cpan-lib/Linux/Distribution.pm" Permission="644" Encode="Base64">cGFja2FnZSBMaW51eDo6RGlzdHJpYnV0aW9uOwoKdXNlIDUuMDA2MDAwOwp1c2Ugc3RyaWN0Owp1c2Ugd2FybmluZ3M7CgpyZXF1aXJlIEV4cG9ydGVyOwoKb3VyIEBJU0EgPSBxdyhFeHBvcnRlcik7CgpvdXIgQEVYUE9SVF9PSyA9IHF3KCBkaXN0cmlidXRpb25fbmFtZSBkaXN0cmlidXRpb25fdmVyc2lvbiApOwoKb3VyICRWRVJTSU9OID0gJzAuMjEnOwoKb3VyICRyZWxlYXNlX2ZpbGVzX2RpcmVjdG9yeT0nL2V0Yyc7Cm91ciAkc3RhbmRhcmRfcmVsZWFzZV9maWxlID0gJ2xzYi1yZWxlYXNlJzsKCm91ciAlcmVsZWFzZV9maWxlcyA9ICgKICAgICdnZW50b28tcmVsZWFzZScgICAgICAgID0+ICdnZW50b28nLAogICAgJ2ZlZG9yYS1yZWxlYXNlJyAgICAgICAgPT4gJ2ZlZG9yYScsCiAgICAnY2VudG9zLXJlbGVhc2UnICAgICAgICA9PiAnY2VudG9zJywKICAgICd0dXJib2xpbnV4LXJlbGVhc2UnICAgID0+ICd0dXJib2xpbnV4JywKICAgICdtYW5kcmFrZS1yZWxlYXNlJyAgICAgID0+ICdtYW5kcmFrZScsCiAgICAnbWFuZHJha2VsaW51eC1yZWxlYXNlJyA9PiAnbWFuZHJha2VsaW51eCcsCiAgICAnZGViaWFuX3ZlcnNpb24nICAgICAgICA9PiAnZGViaWFuJywKICAgICdkZWJpYW5fcmVsZWFzZScgICAgICAgID0+ICdkZWJpYW4nLAogICAgJ1N1U0UtcmVsZWFzZScgICAgICAgICAgPT4gJ3N1c2UnLAogICAgJ2tub3BwaXgtdmVyc2lvbicgICAgICAgPT4gJ2tub3BwaXgnLAogICAgJ3llbGxvd2RvZy1yZWxlYXNlJyAgICAgPT4gJ3llbGxvd2RvZycsCiAgICAnc2xhY2t3YXJlLXZlcnNpb24nICAgICA9PiAnc2xhY2t3YXJlJywKICAgICdzbGFja3dhcmUtcmVsZWFzZScgICAgID0+ICdzbGFja3dhcmUnLAogICAgJ3JlZGZsYWctcmVsZWFzZScgICAgICAgPT4gJ3JlZGZsYWcnLAogICAgJ3JlZGhhdC1yZWxlYXNlJyAgICAgICAgPT4gJ3JlZGhhdCcsCiAgICAncmVkaGF0X3ZlcnNpb24nICAgICAgICA9PiAncmVkaGF0JywKICAgICdjb25lY3RpdmEtcmVsZWFzZScgICAgID0+ICdjb25lY3RpdmEnLAogICAgJ2ltbXVuaXgtcmVsZWFzZScgICAgICAgPT4gJ2ltbXVuaXgnLAogICAgJ3Rpbnlzb2ZhLXJlbGVhc2UnICAgICAgPT4gJ3Rpbnlzb2ZhJywKICAgICd0cnVzdGl4LXJlbGVhc2UnICAgICAgID0+ICd0cnVzdGl4JywKICAgICdhZGFtYW50aXhfdmVyc2lvbicgICAgID0+ICdhZGFtYW50aXgnLAogICAgJ3lvcGVyLXJlbGVhc2UnICAgICAgICAgPT4gJ3lvcGVyJywKICAgICdhcmNoLXJlbGVhc2UnICAgICAgICAgID0+ICdhcmNoJywKICAgICdsaWJyYW5ldF92ZXJzaW9uJyAgICAgID0+ICdsaWJyYW5ldCcsCiAgICAndmEtcmVsZWFzZScgICAgICAgICAgICA9PiAndmEtbGludXgnLAogICAgJ3BhcmR1cy1yZWxlYXNlJyAgICAgICAgPT4gJ3BhcmR1cycsCik7CgpvdXIgJXZlcnNpb25fbWF0Y2ggPSAoCiAgICAnZ2VudG9vJyAgICAgICAgICAgICAgICA9PiAnR2VudG9vIEJhc2UgU3lzdGVtIHJlbGVhc2UgKC4qKScsCiAgICAnZGViaWFuJyAgICAgICAgICAgICAgICA9PiAnKC4rKScsCiAgICAnc3VzZScgICAgICAgICAgICAgICAgICA9PiAnVkVSU0lPTiA9ICguKiknLAogICAgJ2ZlZG9yYScgICAgICAgICAgICAgICAgPT4gJ0ZlZG9yYSg/OiBDb3JlKT8gcmVsZWFzZSAoXGQrKSBcKCcsCiAgICAncmVkZmxhZycgICAgICAgICAgICAgICA9PiAnUmVkIEZsYWcgKD86RGVza3RvcHxMaW51eCkgKD86cmVsZWFzZSB8XCgpKC4qPykoPzogXCguKyk/XCknLAogICAgJ3JlZGhhdCcgICAgICAgICAgICAgICAgPT4gJ1JlZCBIYXQoPzogRW50ZXJwcmlzZSk/IExpbnV4KD86IFNlcnZlcik/IHJlbGVhc2UgKC4qKSBcKCcsCiAgICAnc2xhY2t3YXJlJyAgICAgICAgICAgICA9PiAnXlNsYWNrd2FyZSAoLispJCcsCiAgICAncGFyZHVzJyAgICAgICAgICAgICAgICA9PiAnXlBhcmR1cyAoLispJCcsCiAgICAnY2VudG9zJyAgICAgICAgICAgICAgICA9PiAnXkNlbnRPUyg/OiBMaW51eCk/IHJlbGVhc2UgKC4rKSg/OlxzXChGaW5hbFwpKScsCiAgICAnc2NpZW50aWZpYycgICAgICAgICAgICA9PiAnXlNjaWVudGlmaWMgTGludXggcmVsZWFzZSAoLispIFwoJywKKTsKCgppZiAoJF5PIG5lICdsaW51eCcpIHsKIyAgIHJlcXVpcmUgQ2FycDsKIyAgIENhcnA6OmNyb2FrKCd5b3UgYXJlIHRyeWluZyB0byB1c2UgYSBsaW51eCBzcGVjaWZpYyBtb2R1bGUgb24gYSBkaWZmZXJlbnQgT1MnKTsKfQoKc3ViIG5ldyB7CiAgICBteSAlc2VsZiA9ICgKICAgICAgICAnRElTVFJJQl9JRCcgICAgICAgICAgPT4gJycsCiAgICAgICAgJ0RJU1RSSUJfUkVMRUFTRScgICAgID0+ICcnLAogICAgICAgICdESVNUUklCX0NPREVOQU1FJyAgICA9PiAnJywKICAgICAgICAnRElTVFJJQl9ERVNDUklQVElPTicgPT4gJycsCiAgICAgICAgJ3JlbGVhc2VfZmlsZScgICAgICAgID0+ICcnLAogICAgICAgICdwYXR0ZXJuJyAgICAgICAgICAgICA9PiAnJwogICAgKTsKICAgIAogICAgcmV0dXJuIGJsZXNzIFwlc2VsZjsKfQoKc3ViIGRpc3RyaWJ1dGlvbl9uYW1lIHsKICAgIG15ICRzZWxmID0gc2hpZnQgfHwgbmV3KCk7CiAgICBteSAkZGlzdHJvOwogICAgaWYgKCRkaXN0cm8gPSAkc2VsZi0+X2dldF9sc2JfaW5mbygpKXsKICAgICAgICByZXR1cm4gJGRpc3RybyBpZiAoJGRpc3Rybyk7CiAgICB9CgogICAgZm9yZWFjaCAoJ2ZlZG9yYS1yZWxlYXNlJykgewogICAgICAgIGlmICgtZiAiJHJlbGVhc2VfZmlsZXNfZGlyZWN0b3J5LyRfIiAmJiAhLWwgIiRyZWxlYXNlX2ZpbGVzX2RpcmVjdG9yeS8kXyIpewogICAgICAgICAgICBpZiAoLWYgIiRyZWxlYXNlX2ZpbGVzX2RpcmVjdG9yeS8kXyIgJiYgIS1sICIkcmVsZWFzZV9maWxlc19kaXJlY3RvcnkvJF8iKXsKICAgICAgICAgICAgICAgICRzZWxmLT57J0RJU1RSSUJfSUQnfSA9ICRyZWxlYXNlX2ZpbGVzeyRffTsKICAgICAgICAgICAgICAgICRzZWxmLT57J3JlbGVhc2VfZmlsZSd9ID0gJF87CiAgICAgICAgICAgICAgICByZXR1cm4gJHNlbGYtPnsnRElTVFJJQl9JRCd9OwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfQoKICAgIGZvcmVhY2ggKGtleXMgJXJlbGVhc2VfZmlsZXMpIHsKICAgICAgICBpZiAoLWYgIiRyZWxlYXNlX2ZpbGVzX2RpcmVjdG9yeS8kXyIgJiYgIS1sICIkcmVsZWFzZV9maWxlc19kaXJlY3RvcnkvJF8iKXsKICAgICAgICAgICAgaWYgKC1mICIkcmVsZWFzZV9maWxlc19kaXJlY3RvcnkvJF8iICYmICEtbCAiJHJlbGVhc2VfZmlsZXNfZGlyZWN0b3J5LyRfIil7CiAgICAgICAgICAgICAgICBpZiAoICRyZWxlYXNlX2ZpbGVzeyRffSBlcSAncmVkaGF0JyApIHsKICAgICAgICAgICAgICAgICAgICBmb3JlYWNoIG15ICRyaGVsX2Rlcml2ICgnY2VudG9zJywnc2NpZW50aWZpYycsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICRzZWxmLT57J3BhdHRlcm4nfSA9ICR2ZXJzaW9uX21hdGNoeyRyaGVsX2Rlcml2fTsKICAgICAgICAgICAgICAgICAgICAgICAgJHNlbGYtPnsncmVsZWFzZV9maWxlJ309J3JlZGhhdC1yZWxlYXNlJzsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCAkc2VsZi0+X2dldF9maWxlX2luZm8oKSApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzZWxmLT57J0RJU1RSSUJfSUQnfSA9ICRyaGVsX2Rlcml2OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNlbGYtPnsncmVsZWFzZV9maWxlJ30gPSAkXzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkc2VsZi0+eydESVNUUklCX0lEJ307CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgJHNlbGYtPnsncGF0dGVybid9PScnOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgJHNlbGYtPnsncmVsZWFzZV9maWxlJ30gPSAkXzsKICAgICAgICAgICAgICAgICRzZWxmLT57J0RJU1RSSUJfSUQnfSA9ICRyZWxlYXNlX2ZpbGVzeyRffTsKICAgICAgICAgICAgICAgIHJldHVybiAkc2VsZi0+eydESVNUUklCX0lEJ307CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICB1bmRlZiAKfQoKc3ViIGRpc3RyaWJ1dGlvbl92ZXJzaW9uIHsKICAgIG15ICRzZWxmID0gc2hpZnQgfHwgbmV3KCk7CiAgICBteSAkcmVsZWFzZTsKICAgIHJldHVybiAkcmVsZWFzZSBpZiAoJHJlbGVhc2UgPSAkc2VsZi0+X2dldF9sc2JfaW5mbygnRElTVFJJQl9SRUxFQVNFJykpOwogICAgaWYgKCEgJHNlbGYtPnsnRElTVFJJQl9JRCd9KXsKICAgICAgICAgJHNlbGYtPmRpc3RyaWJ1dGlvbl9uYW1lKCkgb3IgZGllICdObyB2ZXJzaW9uIGJlY2F1c2Ugbm8gZGlzdHJvLic7CiAgICB9CiAgICAkc2VsZi0+eydwYXR0ZXJuJ30gPSAkdmVyc2lvbl9tYXRjaHskc2VsZi0+eydESVNUUklCX0lEJ319OwogICAgJHJlbGVhc2UgPSAkc2VsZi0+X2dldF9maWxlX2luZm8oKTsKICAgICRzZWxmLT57J0RJU1RSSUJfUkVMRUFTRSd9ID0gJHJlbGVhc2U7CiAgICByZXR1cm4gJHJlbGVhc2U7Cn0KCnN1YiBfZ2V0X2xzYl9pbmZvIHsKICAgIG15ICRzZWxmID0gc2hpZnQ7CiAgICBteSAkZmllbGQgPSBzaGlmdCB8fCAnRElTVFJJQl9JRCc7CiAgICBteSAkdG1wID0gJHNlbGYtPnsncmVsZWFzZV9maWxlJ307CiAgICBpZiAoIC1yICIkcmVsZWFzZV9maWxlc19kaXJlY3RvcnkvIiAuICRzdGFuZGFyZF9yZWxlYXNlX2ZpbGUgKSB7CiAgICAgICAgJHNlbGYtPnsncmVsZWFzZV9maWxlJ30gPSAkc3RhbmRhcmRfcmVsZWFzZV9maWxlOwogICAgICAgICRzZWxmLT57J3BhdHRlcm4nfSA9ICRmaWVsZCAuICc9KC4rKSc7CiAgICAgICAgbXkgJGluZm8gPSAkc2VsZi0+X2dldF9maWxlX2luZm8oKTsKICAgICAgICBpZiAoJGluZm8pewogICAgICAgICAgICAkc2VsZi0+eyRmaWVsZH0gPSAkaW5mbzsKICAgICAgICAgICAgcmV0dXJuICRpbmZvCiAgICAgICAgfQogICAgfSAKICAgICRzZWxmLT57J3JlbGVhc2VfZmlsZSd9ID0gJHRtcDsKICAgICRzZWxmLT57J3BhdHRlcm4nfSA9ICcnOwogICAgdW5kZWY7Cn0KCnN1YiBfZ2V0X2ZpbGVfaW5mbyB7CiAgICBteSAkc2VsZiA9IHNoaWZ0OwogICAgb3BlbiBteSAkZmgsICc8JywgIiRyZWxlYXNlX2ZpbGVzX2RpcmVjdG9yeS8iIC4gJHNlbGYtPnsncmVsZWFzZV9maWxlJ30gb3IgZGllICdDYW5ub3Qgb3BlbiBmaWxlOiAnLiRyZWxlYXNlX2ZpbGVzX2RpcmVjdG9yeS4nLycgLiAkc2VsZi0+eydyZWxlYXNlX2ZpbGUnfTsKICAgIG15ICRpbmZvID0gJyc7CiAgICBsb2NhbCAkXzsKICAgIHdoaWxlICg8JGZoPil7CiAgICAgICAgY2hvbXAgJF87CiAgICAgICAgKCRpbmZvKSA9ICRfID1+IG0vJHNlbGYtPnsncGF0dGVybid9LzsKICAgICAgICByZXR1cm4gIlxMJGluZm8iIGlmICRpbmZvOwogICAgfQogICAgdW5kZWY7Cn0KCjE7Cl9fRU5EX18KCgo9aGVhZDEgTkFNRQoKTGludXg6OkRpc3RyaWJ1dGlvbiAtIFBlcmwgZXh0ZW5zaW9uIHRvIGRldGVjdCBvbiB3aGljaCBMaW51eCBkaXN0cmlidXRpb24gd2UgYXJlIHJ1bm5pbmcuCgo9aGVhZDEgU1lOT1BTSVMKCiAgdXNlIExpbnV4OjpEaXN0cmlidXRpb24gcXcoZGlzdHJpYnV0aW9uX25hbWUgZGlzdHJpYnV0aW9uX3ZlcnNpb24pOwoKICBpZihteSAkZGlzdHJvID0gZGlzdHJpYnV0aW9uX25hbWUpIHsKICAgICAgICBteSAkdmVyc2lvbiA9IGRpc3RyaWJ1dGlvbl92ZXJzaW9uKCk7CiAgICBwcmludCAieW91IGFyZSBydW5uaW5nICRkaXN0cm8sIHZlcnNpb24gJHZlcnNpb25cbiI7CiAgfSBlbHNlIHsKICAgIHByaW50ICJkaXN0cmlidXRpb24gdW5rbm93blxuIjsKICB9CgogIE9yIGVsc2UgZG8gaXQgT086CgogIHVzZSBMaW51eDo6RGlzdHJpYnV0aW9uIHF3KGRpc3RyaWJ1dGlvbl9uYW1lIGRpc3RyaWJ1dGlvbl92ZXJzaW9uKTsKCiAgbXkgJGxpbnV4ID0gTGludXg6OkRpc3RyaWJ1dGlvbi0+bmV3OwogIGlmKG15ICRkaXN0cm8gPSAkbGludXgtPmRpc3RyaWJ1dGlvbl9uYW1lKCkpIHsKICAgICAgICBteSAkdmVyc2lvbiA9ICRsaW51eC0+ZGlzdHJpYnV0aW9uX3ZlcnNpb24oKTsKICAgICAgICBwcmludCAieW91IGFyZSBydW5uaW5nICRkaXN0cm8sIHZlcnNpb24gJHZlcnNpb25cbiI7CiAgfSBlbHNlIHsKICAgICAgICBwcmludCAiZGlzdHJpYnV0aW9uIHVua25vd25cbiI7CiAgfQoKPWhlYWQxIERFU0NSSVBUSU9OCgpUaGlzIGlzIGEgc2ltcGxlIG1vZHVsZSB0aGF0IHRyaWVzIHRvIGd1ZXNzIG9uIHdoYXQgbGludXggZGlzdHJpYnV0aW9uIHdlIGFyZSBydW5uaW5nIGJ5IGxvb2tpbmcgZm9yIHJlbGVhc2UncyBmaWxlcyBpbiAvZXRjLiAgSXQgbm93IGxvb2tzIGZvciAnbHNiLXJlbGVhc2UnIGZpcnN0IGFzIHRoYXQgc2hvdWxkIGJlIHRoZSBtb3N0IGNvcnJlY3QgYW5kIGFkZHMgdWJ1bnR1IHN1cHBvcnQuICBTZWNvbmRseSwgaXQgd2lsbCBsb29rIGZvciB0aGUgZGlzdHJvIHNwZWNpZmljIGZpbGVzLgoKSXQgY3VycmVudGx5IHJlY29nbml6ZXMgc2xhY2t3YXJlLCBkZWJpYW4sIHN1c2UsIGZlZG9yYSwgcmVkaGF0LCB0dXJib2xpbnV4LCB5ZWxsb3dkb2csIGtub3BwaXgsIG1hbmRyYWtlLCBjb25lY3RpdmEsIGltbXVuaXgsIHRpbnlzb2ZhLCB2YS1saW51eCwgdHJ1c3RpeCwgYWRhbWFudGl4LCB5b3BlciwgYXJjaC1saW51eCwgbGlicmFuZXQsIGdlbnRvbywgdWJ1bnR1LCBzY2llbnRpZmljIGFuZCByZWRmbGFnLgoKSXQgaGFzIGZ1bmN0aW9uIHRvIGdldCB0aGUgdmVyc2lvbiBmb3IgZGViaWFuLCBzdXNlLCBmZWRvcmEsIHJlZGhhdCwgZ2VudG9vLCBzbGFja3dhcmUsIHNjaWVudGlmaWMsIHJlZGZsYWcgYW5kIHVidW50dShsc2IpLiBQZW9wbGUgcnVubmluZyB1bnN1cHBvcnRlZCBkaXN0cm8ncyBhcmUgZ3JlYXRseSBlbmNvdXJhZ2VkIHRvIHN1Ym1pdCBwYXRjaGVzIDotKQoKPWhlYWQyIEVYUE9SVAoKTm9uZSBieSBkZWZhdWx0LgoKPWhlYWQxIFRPRE8KCkFkZCB0aGUgY2FwYWJpbGl0eSBvZiByZWNvZ25pemUgdGhlIHZlcnNpb24gb2YgdGhlIGRpc3RyaWJ1dGlvbiBmb3IgYWxsIHJlY29nbml6ZWQgZGlzdHJpYnV0aW9ucy4KCj1oZWFkMSBBVVRIT1JTCgpBbGV4YW5kciBDaW9ybmlpIEU8bHQ+YWxleGNob3JueUBnbWFpbC5jb21FPGd0PiwgTDxodHRwOi8vY2hvcm55Lm5ldD4KQWxiZXJ0byBSZSwgRTxsdD5hbGJlcnRvQGFjY2lkaWEubmV0RTxndD4KSnVkaXRoIExlYnplbHRlciwgRTxsdD5qdWRpdGhAb3NkbC5vcmdFPGd0PgoKPWhlYWQxIENPUFlSSUdIVCBBTkQgTElDRU5TRQoKVGhpcyBsaWJyYXJ5IGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKaXQgdW5kZXIgdGhlIHNhbWUgdGVybXMgYXMgUGVybCBpdHNlbGYsIGVpdGhlciBQZXJsIHZlcnNpb24gNS44LjUgb3IsCmF0IHlvdXIgb3B0aW9uLCBhbnkgbGF0ZXIgdmVyc2lvbiBvZiBQZXJsIDUgeW91IG1heSBoYXZlIGF2YWlsYWJsZS4KCj1jdXQKCg==</File>
        <File Location="var/httpd/htdocs/skins/Agent/default/css/Support.Default.css" Permission="644" Encode="Base64">LyoqCiAqIEBwcm9qZWN0ICAgICBPVFJTIChodHRwOi8vd3d3Lm90cnMub3JnKSAtIEFnZW50IEZyb250ZW5kCiAqIEB2ZXJzaW9uICAgICAkUmV2aXNpb246IDEuNSAkCiAqIEBjb3B5cmlnaHQgICBPVFJTIEFHCiAqIEBsaWNlbnNlICAgICBBR1BMIChodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvYWdwbC50eHQpCiAqLwoKQG1lZGlhIHNjcmVlbixwcm9qZWN0aW9uLHR2LGhhbmRoZWxkIHsKCi8qKgogKiBAcGFja2FnZSAgICAgU3VwcG9ydAogKiBAc2VjdGlvbiAgICAgR2VuZXJhbAogKi8KCi5BZG1pblN1cHBvcnQgLkNoZWNrUmVzdWx0IHsKICAgIGJvcmRlci1ib3R0b206IDFweCBkb3R0ZWQgI2FhYTsKICAgIG1hcmdpbi1ib3R0b206IDEwcHg7Cn0KCi5BZG1pblN1cHBvcnQgLkNoZWNrUmVzdWx0ID4gcCB7CiAgICBwYWRkaW5nOiAwIDAgMXB4IDM1cHg7Cn0KCi5BZG1pblN1cHBvcnQgLkNoZWNrUmVzdWx0T0sgPiBwIHsKICAgIGNvbG9yOiAjODg4Owp9CgouQWRtaW5TdXBwb3J0IC5DaGVja1Jlc3VsdE9LOmhvdmVyID4gcCB7CiAgICBjb2xvcjogIzAwMDsKfQovKioKICogQHN1YnNlY3Rpb24gIEZsYWcKICovCi5BZG1pblN1cHBvcnQgLkZsYWcgewogICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQgdXJsKC4uL2ltZy9mbGFnX3NoYWRvdy5wbmcpIG5vLXJlcGVhdCBzY3JvbGwgMCAwOwogICAgaGVpZ2h0OiAxOHB4OwogICAgd2lkdGg6IDI0cHg7CiAgICBmbG9hdDogbGVmdDsKICAgIG1hcmdpbjogMnB4IDEwcHggMCAwOwp9CgouQWRtaW5TdXBwb3J0IC5GbGFnLlNtYWxsIHsKICAgIHdpZHRoOiAxN3B4OwogICAgaGVpZ2h0OiAxMHB4OwogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogYm90dG9tIHJpZ2h0Owp9CgouQWRtaW5TdXBwb3J0IC5GbGFnIHNwYW4gewogICAgZGlzcGxheTogYmxvY2s7CiAgICBoZWlnaHQ6IDE2cHg7CiAgICBtYXJnaW4tcmlnaHQ6IDJweDsKICAgIHRleHQtaW5kZW50OiAtOTk5OXB4OwogICAgY3Vyc29yOiBwb2ludGVyOwogICAgLyogc2V0IGEgZGVmYXVsdCBjb2xvciBmb3IgcHJpb3JpdGllcyAqLwogICAgYmFja2dyb3VuZC1jb2xvcjogI2NkY2RjZDsKfQoKLkFkbWluU3VwcG9ydCAuRmxhZy5TbWFsbCBzcGFuIHsKICAgIGhlaWdodDogOHB4Owp9CgouQWRtaW5TdXBwb3J0IC5DaGVja1Jlc3VsdE9LIC5GbGFnIHNwYW4gewogICAgYmFja2dyb3VuZC1jb2xvcjogIzAwODAwMDsKfQoKLkFkbWluU3VwcG9ydCAuQ2hlY2tSZXN1bHRGYWlsZWQgLkZsYWcgc3BhbiB7CiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmYwMDAwOwp9CgouQWRtaW5TdXBwb3J0IC5DaGVja1Jlc3VsdENyaXRpY2FsIC5GbGFnIHNwYW4gewogICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYTAwMDsKfQoKLkFkbWluU3VwcG9ydCAuQ2hlY2tSZXN1bHRDcml0aWNhbCAuRmxhZyBzcGFuIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmEwMDA7Cn0KCgp9IC8qIGVuZCBAbWVkaWEgKi8=</File>
    </Filelist>
    <DatabaseInstall>
        <TableCreate Type="post" Name="support_bench_test">
            <Column Name="name_a" Required="true" Size="60" Type="VARCHAR"></Column>
            <Column Name="name_b" Required="true" Size="60" Type="VARCHAR"></Column>
            <Index Name="support_index_bench_test_name_a">
                <IndexColumn Name="name_a">
                </IndexColumn>
            </Index>
        </TableCreate>
    </DatabaseInstall>
    <DatabaseUpgrade>
        <TableCreate Type="post" Name="support_bench_test" Version="1.0.8">
            <Column Name="name_a" Required="true" Size="60" Type="VARCHAR"></Column>
            <Column Name="name_b" Required="true" Size="60" Type="VARCHAR"></Column>
            <Index Name="support_index_bench_test_name_a">
                <IndexColumn Name="name_a">
                </IndexColumn>
            </Index>
        </TableCreate>
    </DatabaseUpgrade>
    <DatabaseUninstall>
        <TableDrop Type="post" Name="support_bench_test">
        </TableDrop>
    </DatabaseUninstall>
</otrs_package>